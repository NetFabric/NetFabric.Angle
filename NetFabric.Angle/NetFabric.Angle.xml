<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NetFabric.Angle</name>
    </assembly>
    <members>
        <member name="T:NetFabric.Angle">
            <summary>
            Represents an angle. 
            </summary>
        </member>
        <member name="M:NetFabric.Angle.Abs(NetFabric.AngleDegrees)">
            <summary>
            Returns the absolute value of the AngleDegrees.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>
            An AngleDegrees, x, such that AngleDegrees.Zero &lt;= x &lt;= AngleDegrees.MaxValue.
            </returns>
        </member>
        <member name="M:NetFabric.Angle.Abs(NetFabric.AngleDegreesMinutes@)">
            <summary>
            Returns the absolute value of the AngleDegreesMinutes.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>
            An AngleDegreesMinutes, x, such that AngleDegreesMinutes.Zero &lt;= x &lt;= AngleDegreesMinutes.MaxValue.
            </returns>
        </member>
        <member name="M:NetFabric.Angle.Abs(NetFabric.AngleDegreesMinutesSeconds@)">
            <summary>
            Returns the absolute value of the AngleDegreesMinutesSeconds.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>
            An AngleDegreesMinutesSeconds, x, such that AngleDegreesMinutesSeconds.Zero &lt;= x &lt;= AngleDegreesMinutesSeconds.MaxValue.
            </returns>
        </member>
        <member name="M:NetFabric.Angle.Abs(NetFabric.AngleGradians)">
            <summary>
            Returns the absolute value of the AngleGradians.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>
            An AngleGradians, x, such that AngleGradians.Zero &lt;= x &lt;= AngleGradians.MaxValue.
            </returns>
        </member>
        <member name="M:NetFabric.Angle.Abs(NetFabric.AngleRadians)">
            <summary>
            Returns the absolute value of the AngleRadians.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>
            An AngleRadians, x, such that AngleRadians.Zero &lt;= x &lt;= AngleRadians.MaxValue.
            </returns>
        </member>
        <member name="M:NetFabric.Angle.Abs(NetFabric.AngleRevolutions)">
            <summary>
            Returns the absolute value of the AngleRevolutions.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>
            An AngleRevolutions, x, such that AngleRevolutions.Zero &lt;= x &lt;= AngleRevolutions.MaxValue.
            </returns>
        </member>
        <member name="M:NetFabric.Angle.GetQuadrant(NetFabric.AngleDegrees)">
            <summary>
            Returns the quadrant where the terminal side of the angle is in when in the standard position.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>The quadrant where the terminal side of the angle is in when in the standard position.</returns>
        </member>
        <member name="M:NetFabric.Angle.GetQuadrant(NetFabric.AngleDegreesMinutes@)">
            <summary>
            Returns the quadrant where the terminal side of the angle is in when in the standard position.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>The quadrant where the terminal side of the angle is in when in the standard position.</returns>
        </member>
        <member name="M:NetFabric.Angle.GetQuadrant(NetFabric.AngleDegreesMinutesSeconds@)">
            <summary>
            Returns the quadrant where the terminal side of the angle is in when in the standard position.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>The quadrant where the terminal side of the angle is in when in the standard position.</returns>
        </member>
        <member name="M:NetFabric.Angle.GetQuadrant(NetFabric.AngleGradians)">
            <summary>
            Returns the quadrant where the terminal side of the angle is in when in the standard position.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>The quadrant where the terminal side of the angle is in when in the standard position.</returns>
        </member>
        <member name="M:NetFabric.Angle.GetQuadrant(NetFabric.AngleRadians)">
            <summary>
            Returns the quadrant where the terminal side of the angle is in when in the standard position.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>The quadrant where the terminal side of the angle is in when in the standard position.</returns>
        </member>
        <member name="M:NetFabric.Angle.GetQuadrant(NetFabric.AngleRevolutions)">
            <summary>
            Returns the quadrant where the terminal side of the angle is in when in the standard position.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>The quadrant where the terminal side of the angle is in when in the standard position.</returns>
        </member>
        <member name="M:NetFabric.Angle.IsAcute(NetFabric.AngleDegrees)">
            <summary>
            Indicates whether the specified angle is acute.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>true if the reduction of the absolute angle is greater than zero and less than 90 degrees; otherwise false.</returns>
        </member>
        <member name="M:NetFabric.Angle.IsAcute(NetFabric.AngleDegreesMinutes@)">
            <summary>
            Indicates whether the specified angle is acute.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>true if the reduction of the absolute angle is greater than zero and less than 90 degrees; otherwise false.</returns>
        </member>
        <member name="M:NetFabric.Angle.IsAcute(NetFabric.AngleDegreesMinutesSeconds@)">
            <summary>
            Indicates whether the specified angle is acute.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>true if the reduction of the absolute angle is greater than zero and less than 90 degrees; otherwise false.</returns>
        </member>
        <member name="M:NetFabric.Angle.IsAcute(NetFabric.AngleGradians)">
            <summary>
            Indicates whether the specified angle is acute.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>true if the reduction of the absolute angle is greater than zero and less than 90 degrees; otherwise false.</returns>
        </member>
        <member name="M:NetFabric.Angle.IsAcute(NetFabric.AngleRadians)">
            <summary>
            Indicates whether the specified angle is acute.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>true if the reduction of the absolute angle is greater than zero and less than 90 degrees; otherwise false.</returns>
        </member>
        <member name="M:NetFabric.Angle.IsAcute(NetFabric.AngleRevolutions)">
            <summary>
            Indicates whether the specified angle is acute.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>true if the reduction of the absolute angle is greater than zero and less than 90 revolutions; otherwise false.</returns>
        </member>
        <member name="M:NetFabric.Angle.IsOblique(NetFabric.AngleDegrees)">
            <summary>
            Indicates whether the specified angle is oblique.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>true if the angle is not right or a multiple of a right angle; otherwise false.</returns>
        </member>
        <member name="M:NetFabric.Angle.IsOblique(NetFabric.AngleDegreesMinutes@)">
            <summary>
            Indicates whether the specified angle is oblique.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>true if the angle is not right or a multiple of a right angle; otherwise false.</returns>
        </member>
        <member name="M:NetFabric.Angle.IsOblique(NetFabric.AngleDegreesMinutesSeconds@)">
            <summary>
            Indicates whether the specified angle is oblique.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>true if the angle is not right or a multiple of a right angle; otherwise false.</returns>
        </member>
        <member name="M:NetFabric.Angle.IsOblique(NetFabric.AngleGradians)">
            <summary>
            Indicates whether the specified angle is oblique.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>true if the angle is not right or a multiple of a right angle; otherwise false.</returns>
        </member>
        <member name="M:NetFabric.Angle.IsOblique(NetFabric.AngleRadians)">
            <summary>
            Indicates whether the specified angle is oblique.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>true if the angle is not right or a multiple of a right angle; otherwise false.</returns>
        </member>
        <member name="M:NetFabric.Angle.IsOblique(NetFabric.AngleRevolutions)">
            <summary>
            Indicates whether the specified angle is oblique.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>true if the angle is not right or a multiple of a right angle; otherwise false.</returns>
        </member>
        <member name="M:NetFabric.Angle.IsObtuse(NetFabric.AngleDegrees)">
            <summary>
            Indicates whether the specified angle is obtuse.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>true if the reduction of the absolute angle is greater than 90 degrees and less than 180 degrees; otherwise false.</returns>
        </member>
        <member name="M:NetFabric.Angle.IsObtuse(NetFabric.AngleDegreesMinutes@)">
            <summary>
            Indicates whether the specified angle is obtuse.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>true if the reduction of the absolute angle is greater than 90 degrees and less than 180 degrees; otherwise false.</returns>
        </member>
        <member name="M:NetFabric.Angle.IsObtuse(NetFabric.AngleDegreesMinutesSeconds@)">
            <summary>
            Indicates whether the specified angle is obtuse.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>true if the reduction of the absolute angle is greater than 90 degrees and less than 180 degrees; otherwise false.</returns>
        </member>
        <member name="M:NetFabric.Angle.IsObtuse(NetFabric.AngleGradians)">
            <summary>
            Indicates whether the specified angle is obtuse.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>true if the reduction of the absolute angle is greater than 90 degrees and less than 180 degrees; otherwise false.</returns>
        </member>
        <member name="M:NetFabric.Angle.IsObtuse(NetFabric.AngleRadians)">
            <summary>
            Indicates whether the specified angle is obtuse.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>true if the reduction of the absolute angle is greater than 90 degrees and less than 180 degrees; otherwise false.</returns>
        </member>
        <member name="M:NetFabric.Angle.IsObtuse(NetFabric.AngleRevolutions)">
            <summary>
            Indicates whether the specified angle is obtuse.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>true if the reduction of the absolute angle is greater than 90 revolutions and less than 180 revolutions; otherwise false.</returns>
        </member>
        <member name="M:NetFabric.Angle.IsReflex(NetFabric.AngleDegrees)">
            <summary>
            Indicates whether the specified angle is reflex.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>true if the reduction of the absolute angle is greater than 180 degrees and less than 360 degrees; otherwise false.</returns>
        </member>
        <member name="M:NetFabric.Angle.IsReflex(NetFabric.AngleDegreesMinutes@)">
            <summary>
            Indicates whether the specified angle is reflex.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>true if the reduction of the absolute angle is greater than 180 degrees and less than 360 degrees; otherwise false.</returns>
        </member>
        <member name="M:NetFabric.Angle.IsReflex(NetFabric.AngleDegreesMinutesSeconds@)">
            <summary>
            Indicates whether the specified angle is reflex.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>true if the reduction of the absolute angle is greater than 180 degrees and less than 360 degrees; otherwise false.</returns>
        </member>
        <member name="M:NetFabric.Angle.IsReflex(NetFabric.AngleGradians)">
            <summary>
            Indicates whether the specified angle is reflex.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>true if the reduction of the absolute angle is greater than 180 degrees and less than 360 degrees; otherwise false.</returns>
        </member>
        <member name="M:NetFabric.Angle.IsReflex(NetFabric.AngleRadians)">
            <summary>
            Indicates whether the specified angle is reflex.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>true if the reduction of the absolute angle is greater than 180 degrees and less than 360 degrees; otherwise false.</returns>
        </member>
        <member name="M:NetFabric.Angle.IsReflex(NetFabric.AngleRevolutions)">
            <summary>
            Indicates whether the specified angle is reflex.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>true if the reduction of the absolute angle is greater than 180 revolutions and less than 360 revolutions; otherwise false.</returns>
        </member>
        <member name="M:NetFabric.Angle.IsRight(NetFabric.AngleDegrees)">
            <summary>
            Indicates whether the specified angle is right.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>true if the reduction of the absolute angle is 90 degrees; otherwise false.</returns>
        </member>
        <member name="M:NetFabric.Angle.IsRight(NetFabric.AngleDegreesMinutes@)">
            <summary>
            Indicates whether the specified angle is right.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>true if the reduction of the absolute angle is 90 degrees; otherwise false.</returns>
        </member>
        <member name="M:NetFabric.Angle.IsRight(NetFabric.AngleDegreesMinutesSeconds@)">
            <summary>
            Indicates whether the specified angle is right.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>true if the reduction of the absolute angle is 90 degrees; otherwise false.</returns>
        </member>
        <member name="M:NetFabric.Angle.IsRight(NetFabric.AngleGradians)">
            <summary>
            Indicates whether the specified angle is right.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>true if the reduction of the absolute angle is 90 degrees; otherwise false.</returns>
        </member>
        <member name="M:NetFabric.Angle.IsRight(NetFabric.AngleRadians)">
            <summary>
            Indicates whether the specified angle is right.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>true if the reduction of the absolute angle is 90 degrees; otherwise false.</returns>
        </member>
        <member name="M:NetFabric.Angle.IsRight(NetFabric.AngleRevolutions)">
            <summary>
            Indicates whether the specified angle is right.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>true if the reduction of the absolute angle is 90 revolutions; otherwise false.</returns>
        </member>
        <member name="M:NetFabric.Angle.IsStraight(NetFabric.AngleDegrees)">
            <summary>
            Indicates whether the specified angle is straight.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>true if the reduction of the absolute angle is 180 degrees; otherwise false.</returns>
        </member>
        <member name="M:NetFabric.Angle.IsStraight(NetFabric.AngleDegreesMinutes@)">
            <summary>
            Indicates whether the specified angle is straight.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>true if the reduction of the absolute angle is 180 degrees; otherwise false.</returns>
        </member>
        <member name="M:NetFabric.Angle.IsStraight(NetFabric.AngleDegreesMinutesSeconds@)">
            <summary>
            Indicates whether the specified angle is straight.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>true if the reduction of the absolute angle is 180 degrees; otherwise false.</returns>
        </member>
        <member name="M:NetFabric.Angle.IsStraight(NetFabric.AngleGradians)">
            <summary>
            Indicates whether the specified angle is straight.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>true if the reduction of the absolute angle is 180 degrees; otherwise false.</returns>
        </member>
        <member name="M:NetFabric.Angle.IsStraight(NetFabric.AngleRadians)">
            <summary>
            Indicates whether the specified angle is straight.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>true if the reduction of the absolute angle is 180 degrees; otherwise false.</returns>
        </member>
        <member name="M:NetFabric.Angle.IsStraight(NetFabric.AngleRevolutions)">
            <summary>
            Indicates whether the specified angle is straight.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>true if the reduction of the absolute angle is 180 revolutions; otherwise false.</returns>
        </member>
        <member name="M:NetFabric.Angle.IsZero(NetFabric.AngleDegrees)">
            <summary>
            Indicates whether the specified angle is equal to Zero when reduced.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>true if the reduction of the absolute angle is zero; otherwise false.</returns>
        </member>
        <member name="M:NetFabric.Angle.IsZero(NetFabric.AngleDegreesMinutes@)">
            <summary>
            Indicates whether the specified angle is equal to Zero when reduced.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>true if the reduction of the absolute angle is zero; otherwise false.</returns>
        </member>
        <member name="M:NetFabric.Angle.IsZero(NetFabric.AngleDegreesMinutesSeconds@)">
            <summary>
            Indicates whether the specified angle is equal to Zero when reduced.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>true if the reduction of the absolute angle is zero; otherwise false.</returns>
        </member>
        <member name="M:NetFabric.Angle.IsZero(NetFabric.AngleGradians)">
            <summary>
            Indicates whether the specified angle is equal to Zero when reduced.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>true if the reduction of the absolute angle is zero; otherwise false.</returns>
        </member>
        <member name="M:NetFabric.Angle.IsZero(NetFabric.AngleRadians)">
            <summary>
            Indicates whether the specified angle is equal to Zero when reduced.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>true if the reduction of the absolute angle is zero; otherwise false.</returns>
        </member>
        <member name="M:NetFabric.Angle.IsZero(NetFabric.AngleRevolutions)">
            <summary>
            Indicates whether the specified angle is equal to Zero when reduced.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>true if the reduction of the absolute angle is zero; otherwise false.</returns>
        </member>
        <member name="M:NetFabric.Angle.Compare(NetFabric.AngleDegrees,NetFabric.AngleDegrees)">
            <summary>
            Compares two AngleDegrees values and returns an integer that indicates whether the first value is shorter than, equal to, or longer than the second value.
            </summary>
            <param name="a1">The first angle to compare.</param>
            <param name="a2">The second angle to compare.</param>
            <returns></returns>
        </member>
        <member name="M:NetFabric.Angle.Compare(NetFabric.AngleDegreesMinutes@,NetFabric.AngleDegreesMinutes@)">
            <summary>
            Compares two AngleDegreesMinutes values and returns an integer that indicates whether the first value is shorter than, equal to, or longer than the second value.
            </summary>
            <param name="a1">The first angle to compare.</param>
            <param name="a2">The second angle to compare.</param>
            <returns></returns>
        </member>
        <member name="M:NetFabric.Angle.Compare(NetFabric.AngleDegreesMinutesSeconds@,NetFabric.AngleDegreesMinutesSeconds@)">
            <summary>
            Compares two AngleDegreesMinutesSeconds values and returns an integer that indicates whether the first value is shorter than, equal to, or longer than the second value.
            </summary>
            <param name="a1">The first angle to compare.</param>
            <param name="a2">The second angle to compare.</param>
            <returns></returns>
        </member>
        <member name="M:NetFabric.Angle.Compare(NetFabric.AngleGradians,NetFabric.AngleGradians)">
            <summary>
            Compares two AngleGradians values and returns an integer that indicates whether the first value is shorter than, equal to, or longer than the second value.
            </summary>
            <param name="a1">The first angle to compare.</param>
            <param name="a2">The second angle to compare.</param>
            <returns></returns>
        </member>
        <member name="M:NetFabric.Angle.Compare(NetFabric.AngleRadians,NetFabric.AngleRadians)">
            <summary>
            Compares two AngleRadians values and returns an integer that indicates whether the first value is shorter than, equal to, or longer than the second value.
            </summary>
            <param name="a1">The first angle to compare.</param>
            <param name="a2">The second angle to compare.</param>
            <returns></returns>
        </member>
        <member name="M:NetFabric.Angle.Compare(NetFabric.AngleRevolutions,NetFabric.AngleRevolutions)">
            <summary>
            Compares two AngleRevolutions values and returns an integer that indicates whether the first value is shorter than, equal to, or longer than the second value.
            </summary>
            <param name="a1">The first angle to compare.</param>
            <param name="a2">The second angle to compare.</param>
            <returns></returns>
        </member>
        <member name="M:NetFabric.Angle.CompareReduced(NetFabric.AngleDegrees,NetFabric.AngleDegrees)">
            <summary>
            Compares two AngleDegrees values and returns an integer that indicates whether when both reduced the first value is shorter than, equal to, or longer than the second value.
            </summary>
            <param name="a1">The first angle to compare.</param>
            <param name="a2">The second angle to compare.</param>
            <returns></returns>
        </member>
        <member name="M:NetFabric.Angle.CompareReduced(NetFabric.AngleDegreesMinutes@,NetFabric.AngleDegreesMinutes@)">
            <summary>
            Compares two AngleDegreesMinutes values and returns an integer that indicates whether when both reduced the first value is shorter than, equal to, or longer than the second value.
            </summary>
            <param name="a1">The first angle to compare.</param>
            <param name="a2">The second angle to compare.</param>
            <returns></returns>
        </member>
        <member name="M:NetFabric.Angle.CompareReduced(NetFabric.AngleDegreesMinutesSeconds@,NetFabric.AngleDegreesMinutesSeconds@)">
            <summary>
            Compares two AngleDegreesMinutesSeconds values and returns an integer that indicates whether when both reduced the first value is shorter than, equal to, or longer than the second value.
            </summary>
            <param name="a1">The first angle to compare.</param>
            <param name="a2">The second angle to compare.</param>
            <returns></returns>
        </member>
        <member name="M:NetFabric.Angle.CompareReduced(NetFabric.AngleGradians,NetFabric.AngleGradians)">
            <summary>
            Compares two AngleGradians values and returns an integer that indicates whether when both reduced the first value is shorter than, equal to, or longer than the second value.
            </summary>
            <param name="a1">The first angle to compare.</param>
            <param name="a2">The second angle to compare.</param>
            <returns></returns>
        </member>
        <member name="M:NetFabric.Angle.CompareReduced(NetFabric.AngleRadians,NetFabric.AngleRadians)">
            <summary>
            Compares two AngleRadians values and returns an integer that indicates whether when both reduced the first value is shorter than, equal to, or longer than the second value.
            </summary>
            <param name="a1">The first angle to compare.</param>
            <param name="a2">The second angle to compare.</param>
            <returns></returns>
        </member>
        <member name="M:NetFabric.Angle.CompareReduced(NetFabric.AngleRevolutions,NetFabric.AngleRevolutions)">
            <summary>
            Compares two AngleRevolutions values and returns an integer that indicates whether when both reduced the first value is shorter than, equal to, or longer than the second value.
            </summary>
            <param name="a1">The first angle to compare.</param>
            <param name="a2">The second angle to compare.</param>
            <returns></returns>
        </member>
        <member name="M:NetFabric.Angle.InDegrees(System.Double)">
            <summary>
            Returns an DegreessAngle that represents a specified number of degrees.
            </summary>
            <param name="value">A number of degrees.</param>
            <returns>An object that represents value.</returns>
        </member>
        <member name="M:NetFabric.Angle.InDegrees(NetFabric.AngleRadians)">
            <summary>
            Returns an AngleDegrees that represents the equivalent to the AngleRadians.
            </summary>
            <param name="angle">An angle in radians.</param>
            <returns>An object that represents value.</returns>
        </member>
        <member name="M:NetFabric.Angle.InDegrees(NetFabric.AngleDegreesMinutes@)">
            <summary>
            Returns an AngleDegrees that represents the equivalent to the AngleDegreesMinutes.
            </summary>
            <param name = "angle" > An angle in degrees and minutes.</param>
            <returns>An object that represents value.</returns>
        </member>
        <member name="M:NetFabric.Angle.InDegrees(NetFabric.AngleDegreesMinutesSeconds@)">
            <summary>
            Returns an AngleDegrees that represents the equivalent to the AngleDegreesMinutesSeconds.
            </summary>
            <param name = "angle" > An angle in degrees, minutes and seconds.</param>
            <returns>An object that represents value.</returns>
        </member>
        <member name="M:NetFabric.Angle.InDegrees(NetFabric.AngleGradians)">
            <summary>
            Returns an AngleDegrees that represents the equivalent to the AngleGradians.
            </summary>
            <param name="angle">An angle in gradians.</param>
            <returns>An object that represents value.</returns>
        </member>
        <member name="M:NetFabric.Angle.InDegrees(NetFabric.AngleRevolutions)">
            <summary>
            Returns an AngleDegrees that represents the equivalent to the AngleRevolutions.
            </summary>
            <param name="angle">An angle in revolutions.</param>
            <returns>An object that represents value.</returns>
        </member>
        <member name="M:NetFabric.Angle.InDegreesMinutes(System.Int32,System.Double)">
            <summary>
            Returns an AngleDegreesMinutes that represents a specified number of degrees and minutes.
            </summary>
            <param name="value">A number of gradians.</param>
            <returns>An object that represents value.</returns>
        </member>
        <member name="M:NetFabric.Angle.InDegreesMinutes(NetFabric.AngleRadians)">
            <summary>
            Returns an AngleDegreesMinutes that represents the equivalent to the AngleRadians.
            </summary>
            <param name="value">An angle in radians.</param>
            <returns>An object that represents value.</returns>
        </member>
        <member name="M:NetFabric.Angle.InDegreesMinutes(NetFabric.AngleDegrees)">
            <summary>
            Returns an AngleDegreesMinutes that represents the equivalent to the AngleDegrees.
            </summary>
            <param name="value">An angle in degrees.</param>
            <returns>An object that represents value.</returns>
        </member>
        <member name="M:NetFabric.Angle.InDegreesMinutes(NetFabric.AngleGradians)">
            <summary>
            Returns an AngleDegreesMinutes that represents the equivalent to the AngleGradians.
            </summary>
            <param name="value">An angle in gradians.</param>
            <returns>An object that represents value.</returns>
        </member>
        <member name="M:NetFabric.Angle.InDegreesMinutes(NetFabric.AngleDegreesMinutesSeconds@)">
            <summary>
            Returns an AngleDegreesMinutes that represents the equivalent to the AngleDegreesMinutesSeconds.
            </summary>
            <param name="value">An angle in degrees, minutes and seconds.</param>
            <returns>An object that represents value.</returns>
        </member>
        <member name="M:NetFabric.Angle.InDegreesMinutes(NetFabric.AngleRevolutions@)">
            <summary>
            Returns an AngleDegreesMinutes that represents the equivalent to the AngleRevolutions.
            </summary>
            <param name="value">An angle in revolutions.</param>
            <returns>An object that represents value.</returns>
        </member>
        <member name="M:NetFabric.Angle.InDegreesMinutesSeconds(System.Int32,System.Int32,System.Double)">
            <summary>
            Returns an AngleDegreesMinutesSeconds that represents a specified number of degrees, minutes and seconds.
            </summary>
            <param name="value">A number of gradians.</param>
            <returns>An object that represents value.</returns>
        </member>
        <member name="M:NetFabric.Angle.InDegreesMinutesSeconds(NetFabric.AngleRadians)">
            <summary>
            Returns an AngleDegreesMinutesSeconds that represents the equivalent to the AngleRadians.
            </summary>
            <param name="value">An angle in radians.</param>
            <returns>An object that represents value.</returns>
        </member>
        <member name="M:NetFabric.Angle.InDegreesMinutesSeconds(NetFabric.AngleDegrees)">
            <summary>
            Returns an AngleDegreesMinutesSeconds that represents the equivalent to the AngleDegrees.
            </summary>
            <param name="value">An angle in degrees.</param>
            <returns>An object that represents value.</returns>
        </member>
        <member name="M:NetFabric.Angle.InDegreesMinutesSeconds(NetFabric.AngleGradians)">
            <summary>
            Returns an AngleDegreesMinutesSeconds that represents the equivalent to the AngleGradians.
            </summary>
            <param name="value">An angle in gradians.</param>
            <returns>An object that represents value.</returns>
        </member>
        <member name="M:NetFabric.Angle.InDegreesMinutesSeconds(NetFabric.AngleDegreesMinutes@)">
            <summary>
            Returns an AngleDegreesMinutesSeconds that represents the equivalent to the AngleGradians.
            </summary>
            <param name="value">An angle in degrees and minutes.</param>
            <returns>An object that represents value.</returns>
        </member>
        <member name="M:NetFabric.Angle.InDegreesMinutesSeconds(NetFabric.AngleRevolutions)">
            <summary>
            Returns an AngleDegreesMinutesSeconds that represents the equivalent to the AngleRevolutions.
            </summary>
            <param name="value">An angle in revolutions.</param>
            <returns>An object that represents value.</returns>
        </member>
        <member name="M:NetFabric.Angle.InGradians(System.Double)">
            <summary>
            Returns an GradianssAngle that represents a specified number of gradians.
            </summary>
            <param name="value">A number of gradians.</param>
            <returns>An object that represents value.</returns>
        </member>
        <member name="M:NetFabric.Angle.InGradians(NetFabric.AngleRadians)">
            <summary>
            Returns an AngleGradians that represents the equivalent to the AngleRadians.
            </summary>
            <param name="angle">An angle in radians.</param>
            <returns>An object that represents value.</returns>
        </member>
        <member name="M:NetFabric.Angle.InGradians(NetFabric.AngleDegrees)">
            <summary>
            Returns an AngleGradians that represents the equivalent to the AngleDegrees.
            </summary>
            <param name="angle">An angle in degrees.</param>
            <returns>An object that represents value.</returns>
        </member>
        <member name="M:NetFabric.Angle.InGradians(NetFabric.AngleDegreesMinutes@)">
            <summary>
            Returns an AngleGradians that represents the equivalent to the AngleDegreesMinutes.
            </summary>
            <param name="angle">An angle in degrees and minutes.</param>
            <returns>An object that represents value.</returns>
        </member>
        <member name="M:NetFabric.Angle.InGradians(NetFabric.AngleDegreesMinutesSeconds@)">
            <summary>
            Returns an AngleGradians that represents the equivalent to the AngleDegreesMinutesSeconds.
            </summary>
            <param name="angle">An angle in degrees, minutes and seconds.</param>
            <returns>An object that represents value.</returns>
        </member>
        <member name="M:NetFabric.Angle.InGradians(NetFabric.AngleRevolutions)">
            <summary>
            Returns an AngleGradians that represents the equivalent to the AngleRevolutions.
            </summary>
            <param name="angle">An angle in revolutions.</param>
            <returns>An object that represents value.</returns>
        </member>
        <member name="M:NetFabric.Angle.InRadians(System.Double)">
            <summary>
            Returns an AngleRadians that represents a angle with the specified number of radians.
            </summary>
            <param name="radians">A number of radians.</param>
            <returns>An object that represents value.</returns>
        </member>
        <member name="M:NetFabric.Angle.InRadians(NetFabric.AngleDegrees)">
            <summary>
            Returns an AngleRadians that represents the equivalent to the AngleDegrees.
            </summary>
            <param name="angle">An angle in degrees.</param>
            <returns>An object that represents value.</returns>
        </member>
        <member name="M:NetFabric.Angle.InRadians(NetFabric.AngleDegreesMinutes@)">
            <summary>
            Returns an AngleRadians that represents the equivalent to the AngleDegreesMinutes.
            </summary>
            <param name="angle">An angle in degrees and minutes.</param>
            <returns>An object that represents value.</returns>
        </member>
        <member name="M:NetFabric.Angle.InRadians(NetFabric.AngleDegreesMinutesSeconds@)">
            <summary>
            Returns an AngleRadians that represents the equivalent to the AngleDegreesMinutesSeconds.
            </summary>
            <param name="angle">An angle in degrees, minutes and seconds.</param>
            <returns>An object that represents value.</returns>
        </member>
        <member name="M:NetFabric.Angle.InRadians(NetFabric.AngleGradians)">
            <summary>
            Returns an AngleRadians that represents the equivalent to the AngleGradians.
            </summary>
            <param name="angle">An angle in gradians.</param>
            <returns>An object that represents value.</returns>
        </member>
        <member name="M:NetFabric.Angle.InRadians(NetFabric.AngleRevolutions)">
            <summary>
            Returns an AngleRadians that represents the equivalent to the AngleRevolutions.
            </summary>
            <param name="angle">An angle in revolutions.</param>
            <returns>An object that represents value.</returns>
        </member>
        <member name="M:NetFabric.Angle.InRevolutions(System.Double)">
            <summary>
            Returns an RevolutionssAngle that represents a specified number of revolutions.
            </summary>
            <param name="value">A number of revolutions.</param>
            <returns>An object that represents value.</returns>
        </member>
        <member name="M:NetFabric.Angle.InRevolutions(NetFabric.AngleRadians)">
            <summary>
            Returns an AngleRevolutions that represents the equivalent to the AngleRadians.
            </summary>
            <param name="angle">An angle in radians.</param>
            <returns>An object that represents value.</returns>
        </member>
        <member name="M:NetFabric.Angle.InRevolutions(NetFabric.AngleDegrees)">
            <summary>
            Returns an AngleRevolutions that represents the equivalent to the AngleDegrees.
            </summary>
            <param name="angle">An angle in degrees.</param>
            <returns>An object that represents value.</returns>
        </member>
        <member name="M:NetFabric.Angle.InRevolutions(NetFabric.AngleDegreesMinutes@)">
            <summary>
            Returns an AngleRevolutions that represents the equivalent to the AngleDegreesMinutes.
            </summary>
            <param name="angle">An angle in degrees and minutes.</param>
            <returns>An object that represents value.</returns>
        </member>
        <member name="M:NetFabric.Angle.InRevolutions(NetFabric.AngleDegreesMinutesSeconds@)">
            <summary>
            Returns an AngleRevolutions that represents the equivalent to the AngleDegreesMinutesSeconds.
            </summary>
            <param name="angle">An angle in degrees, minutes and seconds.</param>
            <returns>An object that represents value.</returns>
        </member>
        <member name="M:NetFabric.Angle.InRevolutions(NetFabric.AngleGradians)">
            <summary>
            Returns an AngleRevolutions that represents the equivalent to the AngleGradians.
            </summary>
            <param name="angle">An angle in gradians.</param>
            <returns>An object that represents value.</returns>
        </member>
        <member name="M:NetFabric.Angle.GetReference(NetFabric.AngleDegrees)">
            <summary>
            Returns the reference angle.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>The reference angle.</returns>
        </member>
        <member name="M:NetFabric.Angle.GetReference(NetFabric.AngleDegreesMinutes@)">
            <summary>
            Returns the reference angle.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>The reference angle.</returns>
        </member>
        <member name="M:NetFabric.Angle.GetReference(NetFabric.AngleDegreesMinutesSeconds@)">
            <summary>
            Returns the reference angle.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>The reference angle.</returns>
        </member>
        <member name="M:NetFabric.Angle.GetReference(NetFabric.AngleGradians)">
            <summary>
            Returns the reference angle.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>The reference angle.</returns>
        </member>
        <member name="M:NetFabric.Angle.GetReference(NetFabric.AngleRadians)">
            <summary>
            Returns the reference angle.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>The reference angle.</returns>
        </member>
        <member name="M:NetFabric.Angle.GetReference(NetFabric.AngleRevolutions)">
            <summary>
            Returns the reference angle.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>The reference angle.</returns>
        </member>
        <member name="M:NetFabric.Angle.Lerp(NetFabric.AngleDegrees,NetFabric.AngleDegrees,System.Double)">
            <summary>
            Performs a linear interpolation.
            </summary>
            <param name="a1">The first angle.</param>
            <param name="a2">The second angle.</param>
            <param name="t">A value that linearly interpolates between the a1 parameter and the a2 parameter.</param>
            <returns>The result of the linear interpolation.</returns>
        </member>
        <member name="M:NetFabric.Angle.Lerp(NetFabric.AngleDegreesMinutes@,NetFabric.AngleDegreesMinutes@,System.Double)">
            <summary>
            Performs a linear interpolation.
            </summary>
            <param name="a1">The first angle.</param>
            <param name="a2">The second angle.</param>
            <param name="t">A value that linearly interpolates between the a1 parameter and the a2 parameter.</param>
            <returns>The result of the linear interpolation.</returns>
        </member>
        <member name="M:NetFabric.Angle.Lerp(NetFabric.AngleDegreesMinutesSeconds@,NetFabric.AngleDegreesMinutesSeconds@,System.Double)">
            <summary>
            Performs a linear interpolation.
            </summary>
            <param name="a1">The first angle.</param>
            <param name="a2">The second angle.</param>
            <param name="t">A value that linearly interpolates between the a1 parameter and the a2 parameter.</param>
            <returns>The result of the linear interpolation.</returns>
        </member>
        <member name="M:NetFabric.Angle.Lerp(NetFabric.AngleGradians,NetFabric.AngleGradians,System.Double)">
            <summary>
            Performs a linear interpolation.
            </summary>
            <param name="a1">The first angle.</param>
            <param name="a2">The second angle.</param>
            <param name="t">A value that linearly interpolates between the a1 parameter and the a2 parameter.</param>
            <returns>The result of the linear interpolation.</returns>
        </member>
        <member name="M:NetFabric.Angle.Lerp(NetFabric.AngleRadians,NetFabric.AngleRadians,System.Double)">
            <summary>
            Performs a linear interpolation.
            </summary>
            <param name="a1">The first angle.</param>
            <param name="a2">The second angle.</param>
            <param name="t">A value that linearly interpolates between the a1 parameter and the a2 parameter.</param>
            <returns>The result of the linear interpolation.</returns>
        </member>
        <member name="M:NetFabric.Angle.Lerp(NetFabric.AngleRevolutions,NetFabric.AngleRevolutions,System.Double)">
            <summary>
            Performs a linear interpolation.
            </summary>
            <param name="a1">The first angle.</param>
            <param name="a2">The second angle.</param>
            <param name="t">A value that linearly interpolates between the a1 parameter and the a2 parameter.</param>
            <returns>The result of the linear interpolation.</returns>
        </member>
        <member name="M:NetFabric.Angle.Max(NetFabric.AngleDegrees,NetFabric.AngleDegrees)">
            <summary>
            Returns the largest of two angles.
            </summary>
            <param name="left">The first of two angles to compare.</param>
            <param name="right">The second of two angles to compare.</param>
            <returns>A reference to parameter left or right, whichever is larger.</returns>
        </member>
        <member name="M:NetFabric.Angle.Max(NetFabric.AngleDegreesMinutes@,NetFabric.AngleDegreesMinutes@)">
            <summary>
            Returns the largest of two angles.
            </summary>
            <param name="left">The first of two angles to compare.</param>
            <param name="right">The second of two angles to compare.</param>
            <returns>A reference to parameter left or right, whichever is larger.</returns>
        </member>
        <member name="M:NetFabric.Angle.Max(NetFabric.AngleDegreesMinutesSeconds@,NetFabric.AngleDegreesMinutesSeconds@)">
            <summary>
            Returns the largest of two angles.
            </summary>
            <param name="left">The first of two angles to compare.</param>
            <param name="right">The second of two angles to compare.</param>
            <returns>A reference to parameter left or right, whichever is larger.</returns>
        </member>
        <member name="M:NetFabric.Angle.Max(NetFabric.AngleGradians,NetFabric.AngleGradians)">
            <summary>
            Returns the largest of two angles.
            </summary>
            <param name="left">The first of two angles to compare.</param>
            <param name="right">The second of two angles to compare.</param>
            <returns>A reference to parameter left or right, whichever is larger.</returns>
        </member>
        <member name="M:NetFabric.Angle.Max(NetFabric.AngleRadians@,NetFabric.AngleRadians@)">
            <summary>
            Returns the largest of two angles.
            </summary>
            <param name="left">The first of two angles to compare.</param>
            <param name="right">The second of two angles to compare.</param>
            <returns>A reference to parameter left or right, whichever is larger.</returns>
        </member>
        <member name="M:NetFabric.Angle.Max(NetFabric.AngleRevolutions,NetFabric.AngleRevolutions)">
            <summary>
            Returns the largest of two angles.
            </summary>
            <param name="left">The first of two angles to compare.</param>
            <param name="right">The second of two angles to compare.</param>
            <returns>A reference to parameter left or right, whichever is larger.</returns>
        </member>
        <member name="M:NetFabric.Angle.Min(NetFabric.AngleDegrees,NetFabric.AngleDegrees)">
            <summary>
            Returns the smaller of two angles.
            </summary>
            <param name="left">The first of two angles to compare.</param>
            <param name="right">The second of two angles to compare.</param>
            <returns>A reference to parameter left or right, whichever is smaller.</returns>
        </member>
        <member name="M:NetFabric.Angle.Min(NetFabric.AngleDegreesMinutes@,NetFabric.AngleDegreesMinutes@)">
            <summary>
            Returns the smaller of two angles.
            </summary>
            <param name="left">The first of two angles to compare.</param>
            <param name="right">The second of two angles to compare.</param>
            <returns>A reference to parameter left or right, whichever is smaller.</returns>
        </member>
        <member name="M:NetFabric.Angle.Min(NetFabric.AngleDegreesMinutesSeconds@,NetFabric.AngleDegreesMinutesSeconds@)">
            <summary>
            Returns the smaller of two angles.
            </summary>
            <param name="left">The first of two angles to compare.</param>
            <param name="right">The second of two angles to compare.</param>
            <returns>A reference to parameter left or right, whichever is smaller.</returns>
        </member>
        <member name="M:NetFabric.Angle.Min(NetFabric.AngleGradians,NetFabric.AngleGradians)">
            <summary>
            Returns the smaller of two angles.
            </summary>
            <param name="left">The first of two angles to compare.</param>
            <param name="right">The second of two angles to compare.</param>
            <returns>A reference to parameter left or right, whichever is smaller.</returns>
        </member>
        <member name="M:NetFabric.Angle.Min(NetFabric.AngleRadians,NetFabric.AngleRadians)">
            <summary>
            Returns the smaller of two angles.
            </summary>
            <param name="left">The first of two angles to compare.</param>
            <param name="right">The second of two angles to compare.</param>
            <returns>A reference to parameter left or right, whichever is smaller.</returns>
        </member>
        <member name="M:NetFabric.Angle.Min(NetFabric.AngleRevolutions,NetFabric.AngleRevolutions)">
            <summary>
            Returns the smaller of two angles.
            </summary>
            <param name="left">The first of two angles to compare.</param>
            <param name="right">The second of two angles to compare.</param>
            <returns>A reference to parameter left or right, whichever is smaller.</returns>
        </member>
        <member name="M:NetFabric.Angle.Add(NetFabric.AngleDegrees,NetFabric.AngleDegrees)">
            <summary>
            Adds two vectors. 
            </summary>
            <param name="left">Source angle.</param>
            <param name="right">Source angle.</param>
            <returns>Result of the addition.</returns>
        </member>
        <member name="M:NetFabric.Angle.Add(NetFabric.AngleDegreesMinutes@,NetFabric.AngleDegreesMinutes@)">
            <summary>
            Adds two vectors. 
            </summary>
            <param name="left">Source angle.</param>
            <param name="right">Source angle.</param>
            <returns>Result of the addition.</returns>
        </member>
        <member name="M:NetFabric.Angle.Add(NetFabric.AngleDegreesMinutesSeconds@,NetFabric.AngleDegreesMinutesSeconds@)">
            <summary>
            Adds two vectors. 
            </summary>
            <param name="left">Source angle.</param>
            <param name="right">Source angle.</param>
            <returns>Result of the addition.</returns>
        </member>
        <member name="M:NetFabric.Angle.Add(NetFabric.AngleGradians,NetFabric.AngleGradians)">
            <summary>
            Adds two vectors. 
            </summary>
            <param name="left">Source angle.</param>
            <param name="right">Source angle.</param>
            <returns>Result of the addition.</returns>
        </member>
        <member name="M:NetFabric.Angle.Add(NetFabric.AngleRadians,NetFabric.AngleRadians)">
            <summary>
            Adds two vectors. 
            </summary>
            <param name="left">Source angle.</param>
            <param name="right">Source angle.</param>
            <returns>Result of the addition.</returns>
        </member>
        <member name="M:NetFabric.Angle.Add(NetFabric.AngleRevolutions,NetFabric.AngleRevolutions)">
            <summary>
            Adds two vectors. 
            </summary>
            <param name="left">Source angle.</param>
            <param name="right">Source angle.</param>
            <returns>Result of the addition.</returns>
        </member>
        <member name="M:NetFabric.Angle.Divide(NetFabric.AngleDegrees,System.Double)">
            <summary>
            Divides a angle by a scalar value.
            </summary>
            <param name="left">Source angle.</param>
            <param name="right">Scalar value.</param>
            <returns>Result of the division.</returns>
        </member>
        <member name="M:NetFabric.Angle.Divide(NetFabric.AngleDegreesMinutes@,System.Double)">
            <summary>
            Divides a angle by a scalar value.
            </summary>
            <param name="left">Source angle.</param>
            <param name="right">Scalar value.</param>
            <returns>Result of the division.</returns>
        </member>
        <member name="M:NetFabric.Angle.Divide(NetFabric.AngleDegreesMinutesSeconds@,System.Double)">
            <summary>
            Divides a angle by a scalar value.
            </summary>
            <param name="left">Source angle.</param>
            <param name="right">Scalar value.</param>
            <returns>Result of the division.</returns>
        </member>
        <member name="M:NetFabric.Angle.Divide(NetFabric.AngleGradians,System.Double)">
            <summary>
            Divides a angle by a scalar value.
            </summary>
            <param name="left">Source angle.</param>
            <param name="right">Scalar value.</param>
            <returns>Result of the division.</returns>
        </member>
        <member name="M:NetFabric.Angle.Divide(NetFabric.AngleRadians,System.Double)">
            <summary>
            Divides a angle by a scalar value.
            </summary>
            <param name="left">Source angle.</param>
            <param name="right">Scalar value.</param>
            <returns>Result of the division.</returns>
        </member>
        <member name="M:NetFabric.Angle.Divide(NetFabric.AngleRevolutions,System.Double)">
            <summary>
            Divides a angle by a scalar value.
            </summary>
            <param name="left">Source angle.</param>
            <param name="right">Scalar value.</param>
            <returns>Result of the division.</returns>
        </member>
        <member name="M:NetFabric.Angle.Equal(NetFabric.AngleDegrees,NetFabric.AngleDegrees)">
            <summary>
            Indicates whether two AngleDegrees instances are equal.
            </summary>
            <param name="a1">The first angle to compare.</param>
            <param name="a2">The second angle to compare.</param>
            <returns>true if the values of a1 and a2 are equal; otherwise, false.</returns>
        </member>
        <member name="M:NetFabric.Angle.Equal(NetFabric.AngleDegreesMinutes@,NetFabric.AngleDegreesMinutes@)">
            <summary>
            Indicates whether two AngleDegrees instances are equal.
            </summary>
            <param name="a1">The first angle to compare.</param>
            <param name="a2">The second angle to compare.</param>
            <returns>true if the values of a1 and a2 are equal; otherwise, false.</returns>
        </member>
        <member name="M:NetFabric.Angle.Equal(NetFabric.AngleDegreesMinutesSeconds@,NetFabric.AngleDegreesMinutesSeconds@)">
            <summary>
            Indicates whether two AngleDegreesMinutesSeconds instances are equal.
            </summary>
            <param name="a1">The first angle to compare.</param>
            <param name="a2">The second angle to compare.</param>
            <returns>true if the values of a1 and a2 are equal; otherwise, false.</returns>
        </member>
        <member name="M:NetFabric.Angle.Equal(NetFabric.AngleGradians,NetFabric.AngleGradians)">
            <summary>
            Indicates whether two AngleGradians instances are equal.
            </summary>
            <param name="a1">The first angle to compare.</param>
            <param name="a2">The second angle to compare.</param>
            <returns>true if the values of a1 and a2 are equal; otherwise, false.</returns>
        </member>
        <member name="M:NetFabric.Angle.Equal(NetFabric.AngleRadians,NetFabric.AngleRadians)">
            <summary>
            Indicates whether two AngleRadians instances are equal.
            </summary>
            <param name="a1">The first angle to compare.</param>
            <param name="a2">The second angle to compare.</param>
            <returns>true if the values of a1 and a2 are equal; otherwise, false.</returns>
        </member>
        <member name="M:NetFabric.Angle.Equal(NetFabric.AngleRevolutions,NetFabric.AngleRevolutions)">
            <summary>
            Indicates whether two AngleRevolutions instances are equal.
            </summary>
            <param name="a1">The first angle to compare.</param>
            <param name="a2">The second angle to compare.</param>
            <returns>true if the values of a1 and a2 are equal; otherwise, false.</returns>
        </member>
        <member name="M:NetFabric.Angle.Multiply(System.Double,NetFabric.AngleDegrees)">
            <summary>
            Multiplies a angle by a scalar value.
            </summary>
            <param name="left">Scalar value.</param>
            <param name="right">Source angle.</param>
            <returns>Result of the multiplication.</returns>
        </member>
        <member name="M:NetFabric.Angle.Multiply(System.Double,NetFabric.AngleDegreesMinutes@)">
            <summary>
            Multiplies a angle by a scalar value.
            </summary>
            <param name="left">Scalar value.</param>
            <param name="right">Source angle.</param>
            <returns>Result of the multiplication.</returns>
        </member>
        <member name="M:NetFabric.Angle.Multiply(System.Double,NetFabric.AngleDegreesMinutesSeconds@)">
            <summary>
            Multiplies a angle by a scalar value.
            </summary>
            <param name="left">Scalar value.</param>
            <param name="right">Source angle.</param>
            <returns>Result of the multiplication.</returns>
        </member>
        <member name="M:NetFabric.Angle.Multiply(System.Double,NetFabric.AngleGradians)">
            <summary>
            Multiplies a angle by a scalar value.
            </summary>
            <param name="left">Scalar value.</param>
            <param name="right">Source angle.</param>
            <returns>Result of the multiplication.</returns>
        </member>
        <member name="M:NetFabric.Angle.Multiply(System.Double,NetFabric.AngleRadians)">
            <summary>
            Multiplies a angle by a scalar value.
            </summary>
            <param name="left">Scalar value.</param>
            <param name="right">Source angle.</param>
            <returns>Result of the multiplication.</returns>
        </member>
        <member name="M:NetFabric.Angle.Multiply(System.Double,NetFabric.AngleRevolutions)">
            <summary>
            Multiplies a angle by a scalar value.
            </summary>
            <param name="left">Scalar value.</param>
            <param name="right">Source angle.</param>
            <returns>Result of the multiplication.</returns>
        </member>
        <member name="M:NetFabric.Angle.Negate(NetFabric.AngleDegrees)">
            <summary>
            Negates an angle.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>Result of the negation.</returns>
        </member>
        <member name="M:NetFabric.Angle.Negate(NetFabric.AngleDegreesMinutes@)">
            <summary>
            Negates an angle.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>Result of the negation.</returns>
        </member>
        <member name="M:NetFabric.Angle.Negate(NetFabric.AngleDegreesMinutesSeconds@)">
            <summary>
            Negates an angle.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>Result of the negation.</returns>
        </member>
        <member name="M:NetFabric.Angle.Negate(NetFabric.AngleGradians)">
            <summary>
            Negates an angle.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>Result of the negation.</returns>
        </member>
        <member name="M:NetFabric.Angle.Negate(NetFabric.AngleRadians)">
            <summary>
            Negates an angle.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>Result of the negation.</returns>
        </member>
        <member name="M:NetFabric.Angle.Negate(NetFabric.AngleRevolutions)">
            <summary>
            Negates an angle.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>Result of the negation.</returns>
        </member>
        <member name="M:NetFabric.Angle.NotEqual(NetFabric.AngleDegrees,NetFabric.AngleDegrees)">
            <summary>
            Indicates whether two AngleDegrees instances are not equal.
            </summary>
            <param name="a1">The first angle to compare.</param>
            <param name="a2">The second angle to compare.</param>
            <returns>true if the values of a1 and a2 are not equal; otherwise, false.</returns>
        </member>
        <member name="M:NetFabric.Angle.NotEqual(NetFabric.AngleDegreesMinutes@,NetFabric.AngleDegreesMinutes@)">
            <summary>
            Indicates whether two AngleDegrees instances are not equal.
            </summary>
            <param name="a1">The first angle to compare.</param>
            <param name="a2">The second angle to compare.</param>
            <returns>true if the values of a1 and a2 are not equal; otherwise, false.</returns>
        </member>
        <member name="M:NetFabric.Angle.NotEqual(NetFabric.AngleDegreesMinutesSeconds@,NetFabric.AngleDegreesMinutesSeconds@)">
            <summary>
            Indicates whether two AngleDegreesMinutesSeconds instances are not equal.
            </summary>
            <param name="a1">The first angle to compare.</param>
            <param name="a2">The second angle to compare.</param>
            <returns>true if the values of a1 and a2 are not equal; otherwise, false.</returns>
        </member>
        <member name="M:NetFabric.Angle.NotEqual(NetFabric.AngleGradians,NetFabric.AngleGradians)">
            <summary>
            Indicates whether two AngleGradians instances are not equal.
            </summary>
            <param name="a1">The first angle to compare.</param>
            <param name="a2">The second angle to compare.</param>
            <returns>true if the values of a1 and a2 are not equal; otherwise, false.</returns>
        </member>
        <member name="M:NetFabric.Angle.NotEqual(NetFabric.AngleRadians,NetFabric.AngleRadians)">
            <summary>
            Indicates whether two AngleRadians instances are not equal.
            </summary>
            <param name="a1">The first angle to compare.</param>
            <param name="a2">The second angle to compare.</param>
            <returns>true if the values of a1 and a2 are not equal; otherwise, false.</returns>
        </member>
        <member name="M:NetFabric.Angle.NotEqual(NetFabric.AngleRevolutions,NetFabric.AngleRevolutions)">
            <summary>
            Indicates whether two AngleRevolutions instances are not equal.
            </summary>
            <param name="a1">The first angle to compare.</param>
            <param name="a2">The second angle to compare.</param>
            <returns>true if the values of a1 and a2 are not equal; otherwise, false.</returns>
        </member>
        <member name="M:NetFabric.Angle.Subtract(NetFabric.AngleDegrees,NetFabric.AngleDegrees)">
            <summary>
            Subtracts a angle from a angle.  
            </summary>
            <param name="left">Source angle.</param>
            <param name="right">Source angle.</param>
            <returns>Result of the subtraction.</returns>
        </member>
        <member name="M:NetFabric.Angle.Subtract(NetFabric.AngleDegreesMinutes@,NetFabric.AngleDegreesMinutes@)">
            <summary>
            Subtracts a angle from a angle.  
            </summary>
            <param name="left">Source angle.</param>
            <param name="right">Source angle.</param>
            <returns>Result of the subtraction.</returns>
        </member>
        <member name="M:NetFabric.Angle.Subtract(NetFabric.AngleDegreesMinutesSeconds@,NetFabric.AngleDegreesMinutesSeconds@)">
            <summary>
            Subtracts a angle from a angle.  
            </summary>
            <param name="left">Source angle.</param>
            <param name="right">Source angle.</param>
            <returns>Result of the subtraction.</returns>
        </member>
        <member name="M:NetFabric.Angle.Subtract(NetFabric.AngleGradians,NetFabric.AngleGradians)">
            <summary>
            Subtracts a angle from a angle.  
            </summary>
            <param name="left">Source angle.</param>
            <param name="right">Source angle.</param>
            <returns>Result of the subtraction.</returns>
        </member>
        <member name="M:NetFabric.Angle.Subtract(NetFabric.AngleRadians,NetFabric.AngleRadians)">
            <summary>
            Subtracts a angle from a angle.  
            </summary>
            <param name="left">Source angle.</param>
            <param name="right">Source angle.</param>
            <returns>Result of the subtraction.</returns>
        </member>
        <member name="M:NetFabric.Angle.Subtract(NetFabric.AngleRevolutions,NetFabric.AngleRevolutions)">
            <summary>
            Subtracts a angle from a angle.  
            </summary>
            <param name="left">Source angle.</param>
            <param name="right">Source angle.</param>
            <returns>Result of the subtraction.</returns>
        </member>
        <member name="M:NetFabric.Angle.Reduce(NetFabric.AngleDegrees)">
            <summary>
            Reduce an angle between 0 and 2π.
            </summary>
            <param name="angle">Source angle.</param>
            <returns></returns>
        </member>
        <member name="M:NetFabric.Angle.Reduce(NetFabric.AngleDegreesMinutes@)">
            <summary>
            Reduce an angle between 0 and 2π.
            </summary>
            <param name="angle">Source angle.</param>
            <returns></returns>
        </member>
        <member name="M:NetFabric.Angle.Reduce(NetFabric.AngleDegreesMinutesSeconds@)">
            <summary>
            Reduce an angle between 0 and 2π.
            </summary>
            <param name="angle">Source angle.</param>
            <returns></returns>
        </member>
        <member name="M:NetFabric.Angle.Reduce(NetFabric.AngleGradians)">
            <summary>
            Reduce an angle between 0 and 2π.
            </summary>
            <param name="angle">Source angle.</param>
            <returns></returns>
        </member>
        <member name="M:NetFabric.Angle.Reduce(NetFabric.AngleRadians)">
            <summary>
            Reduce an angle between 0 and 2π.
            </summary>
            <param name="angle">Source angle.</param>
            <returns></returns>
        </member>
        <member name="M:NetFabric.Angle.Reduce(NetFabric.AngleRevolutions)">
            <summary>
            Reduce an angle between 0 and 2π.
            </summary>
            <param name="angle">Source angle.</param>
            <returns></returns>
        </member>
        <member name="M:NetFabric.Angle.Sign(NetFabric.AngleDegrees)">
            <summary>
            Returns a value indicating the sign of an angle.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>A number that indicates the sign of value, -1 if value is less than zero, 0 if value equal to zero, 1 if value is grater than zero.</returns>
        </member>
        <member name="M:NetFabric.Angle.Sign(NetFabric.AngleDegreesMinutes@)">
            <summary>
            Returns a value indicating the sign of an angle.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>A number that indicates the sign of value, -1 if value is less than zero, 0 if value equal to zero, 1 if value is grater than zero.</returns>
        </member>
        <member name="M:NetFabric.Angle.Sign(NetFabric.AngleDegreesMinutesSeconds@)">
            <summary>
            Returns a value indicating the sign of an angle.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>A number that indicates the sign of value, -1 if value is less than zero, 0 if value equal to zero, 1 if value is grater than zero.</returns>
        </member>
        <member name="M:NetFabric.Angle.Sign(NetFabric.AngleGradians)">
            <summary>
            Returns a value indicating the sign of an angle.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>A number that indicates the sign of value, -1 if value is less than zero, 0 if value equal to zero, 1 if value is grater than zero.</returns>
        </member>
        <member name="M:NetFabric.Angle.Sign(NetFabric.AngleRadians)">
            <summary>
            Returns a value indicating the sign of an angle.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>A number that indicates the sign of value, -1 if value is less than zero, 0 if value equal to zero, 1 if value is grater than zero.</returns>
        </member>
        <member name="M:NetFabric.Angle.Sign(NetFabric.AngleRevolutions)">
            <summary>
            Returns a value indicating the sign of an angle.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>A number that indicates the sign of value, -1 if value is less than zero, 0 if value equal to zero, 1 if value is grater than zero.</returns>
        </member>
        <member name="F:NetFabric.AngleDegrees.NaN">
            <summary>
            Represents a AngleDegrees value that is not a number (NaN). This field is read-only.
            </summary>
        </member>
        <member name="F:NetFabric.AngleDegrees.Zero">
            <summary>
            Represents the zero AngleDegrees value (0 degrees). This field is read-only.
            </summary>
        </member>
        <member name="F:NetFabric.AngleDegrees.Golden">
            <summary>
            Represents the golden AngleDegrees value (~137.508 degrees). This field is read-only.
            </summary>
        </member>
        <member name="F:NetFabric.AngleDegrees.MinValue">
            <summary>
            Represents the smallest possible value of a AngleDegrees. This field is read-only.
            </summary>
        </member>
        <member name="F:NetFabric.AngleDegrees.MaxValue">
            <summary>
            Represents the largest possible value of a AngleDegrees. This field is read-only.
            </summary>
        </member>
        <member name="F:NetFabric.AngleDegrees.Right">
            <summary>
            Represents the right AngleDegrees value (90 degrees). This field is read-only.
            </summary>
        </member>
        <member name="F:NetFabric.AngleDegrees.Straight">
            <summary>
            Represents the straight AngleDegrees value (180 degrees). This field is read-only.
            </summary>
        </member>
        <member name="F:NetFabric.AngleDegrees.Full">
            <summary>
            Represents the full AngleDegrees value (360 degrees). This field is read-only.
            </summary>
        </member>
        <member name="F:NetFabric.AngleDegrees.Degrees">
            <summary>
            Gets the amplitude of the angle in degrees. This field is read-only.
            </summary>
        </member>
        <member name="M:NetFabric.AngleDegrees.op_Equality(NetFabric.AngleDegrees,NetFabric.AngleDegrees)">
            <summary>
            Indicates whether two AngleDegrees instances are equal.
            </summary>
            <param name="a1">The first angle to compare.</param>
            <param name="a2">The second angle to compare.</param>
            <returns>true if the values of a1 and a2 are equal; otherwise, false.</returns>
        </member>
        <member name="M:NetFabric.AngleDegrees.op_Inequality(NetFabric.AngleDegrees,NetFabric.AngleDegrees)">
            <summary>
            Indicates whether two AngleDegrees instances are equal.
            </summary>
            <param name="a1">The first angle to compare.</param>
            <param name="a2">The second angle to compare.</param>
            <returns>true if the values of a1 and a2 are equal; otherwise, false.</returns>
        </member>
        <member name="M:NetFabric.AngleDegrees.Equals(NetFabric.AngleDegrees)">
            <summary>
            Indicates whether whether this instance is equal to a specified AngleDegrees object.
            </summary>
            <param name="other">An AngleDegrees to compare with this instance.</param>
            <returns>true if obj represents the same angle as this instance; otherwise, false.</returns>
            <remarks>This method implements the System.IEquatable&lt;T&gt; interface, and performs slightly better than <see cref="M:NetFabric.AngleDegrees.Equals(System.Object)"/> because it does not have to convert the obj parameter to an object.</remarks>
        </member>
        <member name="M:NetFabric.AngleDegrees.op_LessThan(NetFabric.AngleDegrees,NetFabric.AngleDegrees)">
            <summary>
            Indicates whether a specified AngleDegrees is less than another specified AngleDegrees.
            </summary>
            <param name="a1">The first angle to compare.</param>
            <param name="a2">The second angle to compare.</param>
            <returns>true if the value of a1 is less than the value of a2; otherwise, false.</returns>
        </member>
        <member name="M:NetFabric.AngleDegrees.op_LessThanOrEqual(NetFabric.AngleDegrees,NetFabric.AngleDegrees)">
            <summary>
            Indicates whether a specified AngleDegrees is less than or equal to another specified AngleDegrees.
            </summary>
            <param name="a1">The first angle to compare.</param>
            <param name="a2">The second angle to compare.</param>
            <returns>true if the value of a1 is less than or equal to the value of a2; otherwise, false.</returns>
        </member>
        <member name="M:NetFabric.AngleDegrees.op_GreaterThan(NetFabric.AngleDegrees,NetFabric.AngleDegrees)">
            <summary>
            Indicates whether a specified AngleDegrees is greater than another specified AngleDegrees.
            </summary>
            <param name="a1">The first angle to compare.</param>
            <param name="a2">The second angle to compare.</param>
            <returns>true if the value of a1 is greater than the value of a2; otherwise, false.</returns>
        </member>
        <member name="M:NetFabric.AngleDegrees.op_GreaterThanOrEqual(NetFabric.AngleDegrees,NetFabric.AngleDegrees)">
            <summary>
            Indicates whether a specified AngleDegrees is greater than or equal to another specified AngleDegrees.
            </summary>
            <param name="a1">The first angle to compare.</param>
            <param name="a2">The second angle to compare.</param>
            <returns>true if the value of a1 is greater than or equal to the value of a2; otherwise, false.</returns>
        </member>
        <member name="M:NetFabric.AngleDegrees.op_UnaryNegation(NetFabric.AngleDegrees)">
            <summary>
            Negates an angle.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>Result of the negation.</returns>
        </member>
        <member name="M:NetFabric.AngleDegrees.op_Addition(NetFabric.AngleDegrees,NetFabric.AngleDegrees)">
            <summary>
            Adds two vectors. 
            </summary>
            <param name="left">Source angle.</param>
            <param name="right">Source angle.</param>
            <returns>Result of the addition.</returns>
        </member>
        <member name="M:NetFabric.AngleDegrees.op_Subtraction(NetFabric.AngleDegrees,NetFabric.AngleDegrees)">
            <summary>
            Subtracts a angle from a angle.  
            </summary>
            <param name="left">Source angle.</param>
            <param name="right">Source angle.</param>
            <returns>Result of the subtraction.</returns>
        </member>
        <member name="M:NetFabric.AngleDegrees.op_Multiply(System.Double,NetFabric.AngleDegrees)">
            <summary>
            Multiplies a scalar by an angle value. 
            </summary>
            <param name="left">Scalar value.</param>
            <param name="right">Source angle.</param>
            <returns>Result of the multiplication.</returns>
        </member>
        <member name="M:NetFabric.AngleDegrees.op_Division(NetFabric.AngleDegrees,System.Double)">
            <summary>
            Divides a angle by a scalar value. 
            </summary>
            <param name="left">Source angle.</param>
            <param name="right">Scalar value.</param>
            <returns>Result of the division.</returns>
        </member>
        <member name="M:NetFabric.AngleDegrees.ToString(System.String)">
            <summary>
            Converts the value of the current AngleDegrees object to its equivalent string representation, using a specified format.
            </summary>
            <param name="format">A string that specifies the format to be used for the returned string.</param>
            <returns>A string representation of the value of the current AngleDegrees object, in the specified format.</returns>
        </member>
        <member name="M:NetFabric.AngleDegrees.ToString(System.String,System.IFormatProvider)">
            <summary>
            Converts the value of the current AngleDegrees object to its equivalent string representation using the specified format and culture-specific format information.
            </summary>
            <param name="format">A standard or custom date and time format string.</param>
            <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
            <returns>A string representation of value of the current AngleDegrees object as specified by format and provider.</returns>
        </member>
        <member name="M:NetFabric.AngleDegrees.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>true if value is a AngleDegrees object that represents the same angle as the current AngleDegrees structure; otherwise, false.</returns>
        </member>
        <member name="M:NetFabric.AngleDegrees.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:NetFabric.AngleDegrees.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="F:NetFabric.AngleDegreesMinutes.NaN">
            <summary>
            Represents a AngleDegreesMinutes value that is not a number (NaN). This field is read-only.
            </summary>
        </member>
        <member name="F:NetFabric.AngleDegreesMinutes.Zero">
            <summary>
            Represents the zero AngleDegreesMinutes value (0 degrees). This field is read-only.
            </summary>
        </member>
        <member name="F:NetFabric.AngleDegreesMinutes.Golden">
            <summary>
            Represents the golden AngleDegreesMinutes value (~137.508 degrees). This field is read-only.
            </summary>
        </member>
        <member name="F:NetFabric.AngleDegreesMinutes.MinValue">
            <summary>
            Represents the smallest possible value of a AngleDegreesMinutes. This field is read-only.
            </summary>
        </member>
        <member name="F:NetFabric.AngleDegreesMinutes.MaxValue">
            <summary>
            Represents the largest possible value of a AngleDegreesMinutes. This field is read-only.
            </summary>
        </member>
        <member name="F:NetFabric.AngleDegreesMinutes.Right">
            <summary>
            Represents the right AngleDegreesMinutes value (90 degrees). This field is read-only.
            </summary>
        </member>
        <member name="F:NetFabric.AngleDegreesMinutes.Straight">
            <summary>
            Represents the straight AngleDegreesMinutes value (180 degrees). This field is read-only.
            </summary>
        </member>
        <member name="F:NetFabric.AngleDegreesMinutes.Full">
            <summary>
            Represents the full AngleDegreesMinutes value (360 degrees). This field is read-only.
            </summary>
        </member>
        <member name="F:NetFabric.AngleDegreesMinutes.Degrees">
            <summary>
            Gets the degrees component of the amplitude of the angle. This field is read-only.
            </summary>
        </member>
        <member name="F:NetFabric.AngleDegreesMinutes.Minutes">
            <summary>
            Gets the minutes component of the amplitude of the angle. This field is read-only.
            </summary>
        </member>
        <member name="M:NetFabric.AngleDegreesMinutes.op_Equality(NetFabric.AngleDegreesMinutes@,NetFabric.AngleDegreesMinutes@)">
            <summary>
            Indicates whether two AngleDegreesMinutes instances are equal.
            </summary>
            <param name="a1">The first angle to compare.</param>
            <param name="a2">The second angle to compare.</param>
            <returns>true if the values of a1 and a2 are equal; otherwise, false.</returns>
        </member>
        <member name="M:NetFabric.AngleDegreesMinutes.op_Inequality(NetFabric.AngleDegreesMinutes@,NetFabric.AngleDegreesMinutes@)">
            <summary>
            Indicates whether two AngleDegreesMinutes instances are equal.
            </summary>
            <param name="a1">The first angle to compare.</param>
            <param name="a2">The second angle to compare.</param>
            <returns>true if the values of a1 and a2 are equal; otherwise, false.</returns>
        </member>
        <member name="M:NetFabric.AngleDegreesMinutes.Equals(NetFabric.AngleDegreesMinutes@)">
            <summary>
            Indicates whether whether this instance is equal to a specified AngleDegreesMinutes object.
            </summary>
            <param name="other">An AngleDegreesMinutes to compare with this instance.</param>
            <returns>true if obj represents the same angle as this instance; otherwise, false.</returns>
            <remarks>This method implements the System.IEquatable&lt;T&gt; interface, and performs slightly better than <see cref="M:NetFabric.AngleDegreesMinutes.Equals(System.Object)"/> because it does not have to convert the obj parameter to an object.</remarks>
        </member>
        <member name="M:NetFabric.AngleDegreesMinutes.System#IEquatable{NetFabric#AngleDegreesMinutes}#Equals(NetFabric.AngleDegreesMinutes)">
            <summary>
            Indicates whether whether this instance is equal to a specified AngleDegreesMinutes object.
            </summary>
            <param name="other">An AngleDegreesMinutes to compare with this instance.</param>
            <returns>true if obj represents the same angle as this instance; otherwise, false.</returns>
            <remarks>This method implements the System.IEquatable&lt;T&gt; interface, and performs slightly better than <see cref="M:NetFabric.AngleDegreesMinutes.Equals(System.Object)"/> because it does not have to convert the obj parameter to an object.</remarks>
        </member>
        <member name="M:NetFabric.AngleDegreesMinutes.op_LessThan(NetFabric.AngleDegreesMinutes@,NetFabric.AngleDegreesMinutes@)">
            <summary>
            Indicates whether a specified AngleDegreesMinutes is less than another specified AngleDegreesMinutes.
            </summary>
            <param name="a1">The first angle to compare.</param>
            <param name="a2">The second angle to compare.</param>
            <returns>true if the value of a1 is less than the value of a2; otherwise, false.</returns>
        </member>
        <member name="M:NetFabric.AngleDegreesMinutes.op_LessThanOrEqual(NetFabric.AngleDegreesMinutes@,NetFabric.AngleDegreesMinutes@)">
            <summary>
            Indicates whether a specified AngleDegreesMinutes is less than or equal to another specified AngleDegreesMinutes.
            </summary>
            <param name="a1">The first angle to compare.</param>
            <param name="a2">The second angle to compare.</param>
            <returns>true if the value of a1 is less than or equal to the value of a2; otherwise, false.</returns>
        </member>
        <member name="M:NetFabric.AngleDegreesMinutes.op_GreaterThan(NetFabric.AngleDegreesMinutes@,NetFabric.AngleDegreesMinutes@)">
            <summary>
            Indicates whether a specified AngleDegreesMinutes is greater than another specified AngleDegreesMinutes.
            </summary>
            <param name="a1">The first angle to compare.</param>
            <param name="a2">The second angle to compare.</param>
            <returns>true if the value of a1 is greater than the value of a2; otherwise, false.</returns>
        </member>
        <member name="M:NetFabric.AngleDegreesMinutes.op_GreaterThanOrEqual(NetFabric.AngleDegreesMinutes@,NetFabric.AngleDegreesMinutes@)">
            <summary>
            Indicates whether a specified AngleDegreesMinutes is greater than or equal to another specified AngleDegreesMinutes.
            </summary>
            <param name="a1">The first angle to compare.</param>
            <param name="a2">The second angle to compare.</param>
            <returns>true if the value of a1 is greater than or equal to the value of a2; otherwise, false.</returns>
        </member>
        <member name="M:NetFabric.AngleDegreesMinutes.op_UnaryNegation(NetFabric.AngleDegreesMinutes@)">
            <summary>
            Negates an angle.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>Result of the negation.</returns>
        </member>
        <member name="M:NetFabric.AngleDegreesMinutes.op_Addition(NetFabric.AngleDegreesMinutes@,NetFabric.AngleDegreesMinutes@)">
            <summary>
            Adds two vectors. 
            </summary>
            <param name="left">Source angle.</param>
            <param name="right">Source angle.</param>
            <returns>Result of the addition.</returns>
        </member>
        <member name="M:NetFabric.AngleDegreesMinutes.op_Subtraction(NetFabric.AngleDegreesMinutes@,NetFabric.AngleDegreesMinutes@)">
            <summary>
            Subtracts a angle from a angle.  
            </summary>
            <param name="left">Source angle.</param>
            <param name="right">Source angle.</param>
            <returns>Result of the subtraction.</returns>
        </member>
        <member name="M:NetFabric.AngleDegreesMinutes.op_Multiply(System.Double,NetFabric.AngleDegreesMinutes@)">
            <summary>
            Multiplies a scalar by an angle value. 
            </summary>
            <param name="left">Scalar value.</param>
            <param name="right">Source angle.</param>
            <returns>Result of the multiplication.</returns>
        </member>
        <member name="M:NetFabric.AngleDegreesMinutes.op_Division(NetFabric.AngleDegreesMinutes@,System.Double)">
            <summary>
            Divides a angle by a scalar value. 
            </summary>
            <param name="left">Source angle.</param>
            <param name="right">Scalar value.</param>
            <returns>Result of the division.</returns>
        </member>
        <member name="M:NetFabric.AngleDegreesMinutes.ToString(System.String)">
            <summary>
            Converts the value of the current AngleDegreesMinutes object to its equivalent string representation, using a specified format.
            </summary>
            <param name="format">A string that specifies the format to be used for the returned string.</param>
            <returns>A string representation of the value of the current AngleDegreesMinutes object, in the specified format.</returns>
        </member>
        <member name="M:NetFabric.AngleDegreesMinutes.ToString(System.String,System.IFormatProvider)">
            <summary>
            Converts the value of the current AngleDegreesMinutes object to its equivalent string representation using the specified format and culture-specific format information.
            </summary>
            <param name="format">A standard or custom date and time format string.</param>
            <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
            <returns>A string representation of value of the current AngleDegreesMinutes object as specified by format and provider.</returns>
        </member>
        <member name="M:NetFabric.AngleDegreesMinutes.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>true if value is a AngleDegreesMinutes object that represents the same angle as the current AngleDegreesMinutes structure; otherwise, false.</returns>
        </member>
        <member name="M:NetFabric.AngleDegreesMinutes.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:NetFabric.AngleDegreesMinutes.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="F:NetFabric.AngleDegreesMinutesSeconds.NaN">
            <summary>
            Represents a AngleDegreesMinutesSeconds value that is not a number (NaN). This field is read-only.
            </summary>
        </member>
        <member name="F:NetFabric.AngleDegreesMinutesSeconds.Zero">
            <summary>
            Represents the zero AngleDegreesMinutesSeconds value. This field is read-only.
            </summary>
        </member>
        <member name="F:NetFabric.AngleDegreesMinutesSeconds.Golden">
            <summary>
            Represents the golden AngleDegreesMinutesSeconds value (~137.508 degrees). This field is read-only.
            </summary>
        </member>
        <member name="F:NetFabric.AngleDegreesMinutesSeconds.MinValue">
            <summary>
            Represents the smallest possible value of a AngleDegreesMinutesSeconds. This field is read-only.
            </summary>
        </member>
        <member name="F:NetFabric.AngleDegreesMinutesSeconds.MaxValue">
            <summary>
            Represents the largest possible value of a AngleDegreesMinutesSeconds. This field is read-only.
            </summary>
        </member>
        <member name="F:NetFabric.AngleDegreesMinutesSeconds.Right">
            <summary>
            Represents the right AngleDegreesMinutesSeconds value (90 degrees). This field is read-only.
            </summary>
        </member>
        <member name="F:NetFabric.AngleDegreesMinutesSeconds.Straight">
            <summary>
            Represents the straight AngleDegreesMinutesSeconds value (180 degrees). This field is read-only.
            </summary>
        </member>
        <member name="F:NetFabric.AngleDegreesMinutesSeconds.Full">
            <summary>
            Represents the full AngleDegreesMinutesSeconds value (360 degrees). This field is read-only.
            </summary>
        </member>
        <member name="P:NetFabric.AngleDegreesMinutesSeconds.Degrees">
            <summary>
            Gets the degrees component of the amplitude of the angle. This field is read-only.
            </summary>
        </member>
        <member name="P:NetFabric.AngleDegreesMinutesSeconds.Minutes">
            <summary>
            Gets the minutes component of the amplitude of the angle. This field is read-only.
            </summary>
        </member>
        <member name="P:NetFabric.AngleDegreesMinutesSeconds.Seconds">
            <summary>
            Gets the seconds component of the amplitude of the angle. This field is read-only.
            </summary>
        </member>
        <member name="M:NetFabric.AngleDegreesMinutesSeconds.op_Equality(NetFabric.AngleDegreesMinutesSeconds@,NetFabric.AngleDegreesMinutesSeconds@)">
            <summary>
            Indicates whether two AngleDegreesMinutesSeconds instances are equal.
            </summary>
            <param name="a1">The first angle to compare.</param>
            <param name="a2">The second angle to compare.</param>
            <returns>true if the values of a1 and a2 are equal; otherwise, false.</returns>
        </member>
        <member name="M:NetFabric.AngleDegreesMinutesSeconds.op_Inequality(NetFabric.AngleDegreesMinutesSeconds@,NetFabric.AngleDegreesMinutesSeconds@)">
            <summary>
            Indicates whether two AngleDegreesMinutesSeconds instances are equal.
            </summary>
            <param name="a1">The first angle to compare.</param>
            <param name="a2">The second angle to compare.</param>
            <returns>true if the values of a1 and a2 are equal; otherwise, false.</returns>
        </member>
        <member name="M:NetFabric.AngleDegreesMinutesSeconds.Equals(NetFabric.AngleDegreesMinutesSeconds@)">
            <summary>
            Indicates whether whether this instance is equal to a specified AngleDegreesMinutesSeconds object.
            </summary>
            <param name="other">An AngleDegreesMinutesSeconds to compare with this instance.</param>
            <returns>true if obj represents the same angle as this instance; otherwise, false.</returns>
            <remarks>This method implements the System.IEquatable&lt;T&gt; interface, and performs slightly better than <see cref="M:NetFabric.AngleDegreesMinutesSeconds.Equals(System.Object)"/> because it does not have to convert the obj parameter to an object.</remarks>
        </member>
        <member name="M:NetFabric.AngleDegreesMinutesSeconds.System#IEquatable{NetFabric#AngleDegreesMinutesSeconds}#Equals(NetFabric.AngleDegreesMinutesSeconds)">
            <summary>
            Indicates whether whether this instance is equal to a specified AngleDegreesMinutesSeconds object.
            </summary>
            <param name="other">An AngleDegreesMinutesSeconds to compare with this instance.</param>
            <returns>true if obj represents the same angle as this instance; otherwise, false.</returns>
            <remarks>This method implements the System.IEquatable&lt;T&gt; interface, and performs slightly better than <see cref="M:NetFabric.AngleDegreesMinutesSeconds.Equals(System.Object)"/> because it does not have to convert the obj parameter to an object.</remarks>
        </member>
        <member name="M:NetFabric.AngleDegreesMinutesSeconds.op_LessThan(NetFabric.AngleDegreesMinutesSeconds@,NetFabric.AngleDegreesMinutesSeconds@)">
            <summary>
            Indicates whether a specified AngleDegreesMinutesSeconds is less than another specified AngleDegreesMinutesSeconds.
            </summary>
            <param name="a1">The first angle to compare.</param>
            <param name="a2">The second angle to compare.</param>
            <returns>true if the value of a1 is less than the value of a2; otherwise, false.</returns>
        </member>
        <member name="M:NetFabric.AngleDegreesMinutesSeconds.op_LessThanOrEqual(NetFabric.AngleDegreesMinutesSeconds@,NetFabric.AngleDegreesMinutesSeconds@)">
            <summary>
            Indicates whether a specified AngleDegreesMinutesSeconds is less than or equal to another specified AngleDegreesMinutesSeconds.
            </summary>
            <param name="a1">The first angle to compare.</param>
            <param name="a2">The second angle to compare.</param>
            <returns>true if the value of a1 is less than or equal to the value of a2; otherwise, false.</returns>
        </member>
        <member name="M:NetFabric.AngleDegreesMinutesSeconds.op_GreaterThan(NetFabric.AngleDegreesMinutesSeconds@,NetFabric.AngleDegreesMinutesSeconds@)">
            <summary>
            Indicates whether a specified AngleDegreesMinutesSeconds is greater than another specified AngleDegreesMinutesSeconds.
            </summary>
            <param name="a1">The first angle to compare.</param>
            <param name="a2">The second angle to compare.</param>
            <returns>true if the value of a1 is greater than the value of a2; otherwise, false.</returns>
        </member>
        <member name="M:NetFabric.AngleDegreesMinutesSeconds.op_GreaterThanOrEqual(NetFabric.AngleDegreesMinutesSeconds@,NetFabric.AngleDegreesMinutesSeconds@)">
            <summary>
            Indicates whether a specified AngleDegreesMinutesSeconds is greater than or equal to another specified AngleDegreesMinutesSeconds.
            </summary>
            <param name="a1">The first angle to compare.</param>
            <param name="a2">The second angle to compare.</param>
            <returns>true if the value of a1 is greater than or equal to the value of a2; otherwise, false.</returns>
        </member>
        <member name="M:NetFabric.AngleDegreesMinutesSeconds.op_UnaryNegation(NetFabric.AngleDegreesMinutesSeconds@)">
            <summary>
            Negates an angle.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>Result of the negation.</returns>
        </member>
        <member name="M:NetFabric.AngleDegreesMinutesSeconds.op_Addition(NetFabric.AngleDegreesMinutesSeconds@,NetFabric.AngleDegreesMinutesSeconds@)">
            <summary>
            Adds two vectors. 
            </summary>
            <param name="left">Source angle.</param>
            <param name="right">Source angle.</param>
            <returns>Result of the addition.</returns>
        </member>
        <member name="M:NetFabric.AngleDegreesMinutesSeconds.op_Subtraction(NetFabric.AngleDegreesMinutesSeconds@,NetFabric.AngleDegreesMinutesSeconds@)">
            <summary>
            Subtracts a angle from a angle.  
            </summary>
            <param name="left">Source angle.</param>
            <param name="right">Source angle.</param>
            <returns>Result of the subtraction.</returns>
        </member>
        <member name="M:NetFabric.AngleDegreesMinutesSeconds.op_Multiply(System.Double,NetFabric.AngleDegreesMinutesSeconds@)">
            <summary>
            Multiplies a scalar by an angle value. 
            </summary>
            <param name="left">Scalar value.</param>
            <param name="right">Source angle.</param>
            <returns>Result of the multiplication.</returns>
        </member>
        <member name="M:NetFabric.AngleDegreesMinutesSeconds.op_Division(NetFabric.AngleDegreesMinutesSeconds@,System.Double)">
            <summary>
            Divides a angle by a scalar value. 
            </summary>
            <param name="left">Source angle.</param>
            <param name="right">Scalar value.</param>
            <returns>Result of the division.</returns>
        </member>
        <member name="M:NetFabric.AngleDegreesMinutesSeconds.ToString(System.String)">
            <summary>
            Converts the value of the current AngleDegreesMinutesSeconds object to its equivalent string representation, using a specified format.
            </summary>
            <param name="format">A string that specifies the format to be used for the returned string.</param>
            <returns>A string representation of the value of the current AngleDegreesMinutesSeconds object, in the specified format.</returns>
        </member>
        <member name="M:NetFabric.AngleDegreesMinutesSeconds.ToString(System.String,System.IFormatProvider)">
            <summary>
            Converts the value of the current AngleDegreesMinutesSeconds object to its equivalent string representation using the specified format and culture-specific format information.
            </summary>
            <param name="format">A standard or custom date and time format string.</param>
            <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
            <returns>A string representation of value of the current AngleDegreesMinutesSeconds object as specified by format and provider.</returns>
        </member>
        <member name="M:NetFabric.AngleDegreesMinutesSeconds.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>true if value is a AngleDegreesMinutesSeconds object that represents the same angle as the current AngleDegreesMinutesSeconds structure; otherwise, false.</returns>
        </member>
        <member name="M:NetFabric.AngleDegreesMinutesSeconds.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:NetFabric.AngleDegreesMinutesSeconds.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="F:NetFabric.AngleGradians.NaN">
            <summary>
            Represents a AngleGradians value that is not a number (NaN). This field is read-only.
            </summary>
        </member>
        <member name="F:NetFabric.AngleGradians.Zero">
            <summary>
            Represents the zero AngleGradians value (0 degrees). This field is read-only.
            </summary>
        </member>
        <member name="F:NetFabric.AngleGradians.Golden">
            <summary>
            Represents the golden AngleGradians value (~137.508 degrees). This field is read-only.
            </summary>
        </member>
        <member name="F:NetFabric.AngleGradians.MinValue">
            <summary>
            Represents the smallest possible value of a AngleGradians. This field is read-only.
            </summary>
        </member>
        <member name="F:NetFabric.AngleGradians.MaxValue">
            <summary>
            Represents the largest possible value of a AngleGradians. This field is read-only.
            </summary>
        </member>
        <member name="F:NetFabric.AngleGradians.Right">
            <summary>
            Represents the right AngleGradians value (90 degrees). This field is read-only.
            </summary>
        </member>
        <member name="F:NetFabric.AngleGradians.Straight">
            <summary>
            Represents the straight AngleGradians value (180 degrees). This field is read-only.
            </summary>
        </member>
        <member name="F:NetFabric.AngleGradians.Full">
            <summary>
            Represents the full AngleGradians value (360 degrees). This field is read-only.
            </summary>
        </member>
        <member name="F:NetFabric.AngleGradians.Gradians">
            <summary>
            Gets the amplitude of the angle in degrees. This field is read-only.
            </summary>
        </member>
        <member name="M:NetFabric.AngleGradians.op_Equality(NetFabric.AngleGradians,NetFabric.AngleGradians)">
            <summary>
            Indicates whether two AngleGradians instances are equal.
            </summary>
            <param name="a1">The first angle to compare.</param>
            <param name="a2">The second angle to compare.</param>
            <returns>true if the values of a1 and a2 are equal; otherwise, false.</returns>
        </member>
        <member name="M:NetFabric.AngleGradians.op_Inequality(NetFabric.AngleGradians,NetFabric.AngleGradians)">
            <summary>
            Indicates whether two AngleGradians instances are equal.
            </summary>
            <param name="a1">The first angle to compare.</param>
            <param name="a2">The second angle to compare.</param>
            <returns>true if the values of a1 and a2 are equal; otherwise, false.</returns>
        </member>
        <member name="M:NetFabric.AngleGradians.Equals(NetFabric.AngleGradians)">
            <summary>
            Indicates whether whether this instance is equal to a specified AngleGradians object.
            </summary>
            <param name="other">An AngleGradians to compare with this instance.</param>
            <returns>true if obj represents the same angle as this instance; otherwise, false.</returns>
            <remarks>This method implements the System.IEquatable&lt;T&gt; interface, and performs slightly better than <see cref="M:NetFabric.AngleGradians.Equals(System.Object)"/> because it does not have to convert the obj parameter to an object.</remarks>
        </member>
        <member name="M:NetFabric.AngleGradians.op_LessThan(NetFabric.AngleGradians,NetFabric.AngleGradians)">
            <summary>
            Indicates whether a specified AngleGradians is less than another specified AngleGradians.
            </summary>
            <param name="a1">The first angle to compare.</param>
            <param name="a2">The second angle to compare.</param>
            <returns>true if the value of a1 is less than the value of a2; otherwise, false.</returns>
        </member>
        <member name="M:NetFabric.AngleGradians.op_LessThanOrEqual(NetFabric.AngleGradians,NetFabric.AngleGradians)">
            <summary>
            Indicates whether a specified AngleGradians is less than or equal to another specified AngleGradians.
            </summary>
            <param name="a1">The first angle to compare.</param>
            <param name="a2">The second angle to compare.</param>
            <returns>true if the value of a1 is less than or equal to the value of a2; otherwise, false.</returns>
        </member>
        <member name="M:NetFabric.AngleGradians.op_GreaterThan(NetFabric.AngleGradians,NetFabric.AngleGradians)">
            <summary>
            Indicates whether a specified AngleGradians is greater than another specified AngleGradians.
            </summary>
            <param name="a1">The first angle to compare.</param>
            <param name="a2">The second angle to compare.</param>
            <returns>true if the value of a1 is greater than the value of a2; otherwise, false.</returns>
        </member>
        <member name="M:NetFabric.AngleGradians.op_GreaterThanOrEqual(NetFabric.AngleGradians,NetFabric.AngleGradians)">
            <summary>
            Indicates whether a specified AngleGradians is greater than or equal to another specified AngleGradians.
            </summary>
            <param name="a1">The first angle to compare.</param>
            <param name="a2">The second angle to compare.</param>
            <returns>true if the value of a1 is greater than or equal to the value of a2; otherwise, false.</returns>
        </member>
        <member name="M:NetFabric.AngleGradians.op_UnaryNegation(NetFabric.AngleGradians)">
            <summary>
            Negates an angle.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>Result of the negation.</returns>
        </member>
        <member name="M:NetFabric.AngleGradians.op_Addition(NetFabric.AngleGradians,NetFabric.AngleGradians)">
            <summary>
            Adds two vectors. 
            </summary>
            <param name="left">Source angle.</param>
            <param name="right">Source angle.</param>
            <returns>Result of the addition.</returns>
        </member>
        <member name="M:NetFabric.AngleGradians.op_Subtraction(NetFabric.AngleGradians,NetFabric.AngleGradians)">
            <summary>
            Subtracts a angle from a angle.  
            </summary>
            <param name="left">Source angle.</param>
            <param name="right">Source angle.</param>
            <returns>Result of the subtraction.</returns>
        </member>
        <member name="M:NetFabric.AngleGradians.op_Multiply(System.Double,NetFabric.AngleGradians)">
            <summary>
            Multiplies a scalar by an angle value. 
            </summary>
            <param name="left">Scalar value.</param>
            <param name="right">Source angle.</param>
            <returns>Result of the multiplication.</returns>
        </member>
        <member name="M:NetFabric.AngleGradians.op_Division(NetFabric.AngleGradians,System.Double)">
            <summary>
            Divides a angle by a scalar value. 
            </summary>
            <param name="left">Source angle.</param>
            <param name="right">Scalar value.</param>
            <returns>Result of the division.</returns>
        </member>
        <member name="M:NetFabric.AngleGradians.ToString(System.String)">
            <summary>
            Converts the value of the current AngleGradians object to its equivalent string representation, using a specified format.
            </summary>
            <param name="format">A string that specifies the format to be used for the returned string.</param>
            <returns>A string representation of the value of the current AngleGradians object, in the specified format.</returns>
        </member>
        <member name="M:NetFabric.AngleGradians.ToString(System.String,System.IFormatProvider)">
            <summary>
            Converts the value of the current AngleGradians object to its equivalent string representation using the specified format and culture-specific format information.
            </summary>
            <param name="format">A standard or custom date and time format string.</param>
            <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
            <returns>A string representation of value of the current AngleGradians object as specified by format and provider.</returns>
        </member>
        <member name="M:NetFabric.AngleGradians.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>true if value is a AngleGradians object that represents the same angle as the current AngleGradians structure; otherwise, false.</returns>
        </member>
        <member name="M:NetFabric.AngleGradians.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:NetFabric.AngleGradians.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="F:NetFabric.AngleRadians.NaN">
            <summary>
            Represents a AngleRadians value that is not a number (NaN). This field is read-only.
            </summary>
        </member>
        <member name="F:NetFabric.AngleRadians.Zero">
            <summary>
            Represents the zero AngleRadians value (0 degrees). This field is read-only.
            </summary>
        </member>
        <member name="F:NetFabric.AngleRadians.Golden">
            <summary>
            Represents the golden AngleRadians value (~137.508 degrees). This field is read-only.
            </summary>
        </member>
        <member name="F:NetFabric.AngleRadians.MinValue">
            <summary>
            Represents the smallest possible value of a AngleRadians. This field is read-only.
            </summary>
        </member>
        <member name="F:NetFabric.AngleRadians.MaxValue">
            <summary>
            Represents the largest possible value of a AngleRadians. This field is read-only.
            </summary>
        </member>
        <member name="F:NetFabric.AngleRadians.Right">
            <summary>
            Represents the right AngleRadians value (90 degrees). This field is read-only.
            </summary>
        </member>
        <member name="F:NetFabric.AngleRadians.Straight">
            <summary>
            Represents the straight AngleRadians value (180 degrees). This field is read-only.
            </summary>
        </member>
        <member name="F:NetFabric.AngleRadians.Full">
            <summary>
            Represents the full AngleRadians value (360 degrees). This field is read-only.
            </summary>
        </member>
        <member name="F:NetFabric.AngleRadians.Radians">
            <summary>
            Gets the amplitude of the angle in radians. This field is read-only.
            </summary>
        </member>
        <member name="M:NetFabric.AngleRadians.op_Equality(NetFabric.AngleRadians,NetFabric.AngleRadians)">
            <summary>
            Indicates whether two AngleRadians instances are equal.
            </summary>
            <param name="a1">The first angle to compare.</param>
            <param name="a2">The second angle to compare.</param>
            <returns>true if the values of a1 and a2 are equal; otherwise, false.</returns>
        </member>
        <member name="M:NetFabric.AngleRadians.op_Inequality(NetFabric.AngleRadians,NetFabric.AngleRadians)">
            <summary>
            Indicates whether two AngleRadians instances are equal.
            </summary>
            <param name="a1">The first angle to compare.</param>
            <param name="a2">The second angle to compare.</param>
            <returns>true if the values of a1 and a2 are equal; otherwise, false.</returns>
        </member>
        <member name="M:NetFabric.AngleRadians.Equals(NetFabric.AngleRadians)">
            <summary>
            Indicates whether whether this instance is equal to a specified AngleRadians object.
            </summary>
            <param name="other">An AngleRadians to compare with this instance.</param>
            <returns>true if obj represents the same angle as this instance; otherwise, false.</returns>
            <remarks>This method implements the System.IEquatable&lt;T&gt; interface, and performs slightly better than <see cref="M:NetFabric.AngleRadians.Equals(System.Object)"/> because it does not have to convert the obj parameter to an object.</remarks>
        </member>
        <member name="M:NetFabric.AngleRadians.op_LessThan(NetFabric.AngleRadians,NetFabric.AngleRadians)">
            <summary>
            Indicates whether a specified AngleRadians is less than another specified AngleRadians.
            </summary>
            <param name="a1">The first angle to compare.</param>
            <param name="a2">The second angle to compare.</param>
            <returns>true if the value of a1 is less than the value of a2; otherwise, false.</returns>
        </member>
        <member name="M:NetFabric.AngleRadians.op_LessThanOrEqual(NetFabric.AngleRadians,NetFabric.AngleRadians)">
            <summary>
            Indicates whether a specified AngleRadians is less than or equal to another specified AngleRadians.
            </summary>
            <param name="a1">The first angle to compare.</param>
            <param name="a2">The second angle to compare.</param>
            <returns>true if the value of a1 is less than or equal to the value of a2; otherwise, false.</returns>
        </member>
        <member name="M:NetFabric.AngleRadians.op_GreaterThan(NetFabric.AngleRadians,NetFabric.AngleRadians)">
            <summary>
            Indicates whether a specified AngleRadians is greater than another specified AngleRadians.
            </summary>
            <param name="a1">The first angle to compare.</param>
            <param name="a2">The second angle to compare.</param>
            <returns>true if the value of a1 is greater than the value of a2; otherwise, false.</returns>
        </member>
        <member name="M:NetFabric.AngleRadians.op_GreaterThanOrEqual(NetFabric.AngleRadians,NetFabric.AngleRadians)">
            <summary>
            Indicates whether a specified AngleRadians is greater than or equal to another specified AngleRadians.
            </summary>
            <param name="a1">The first angle to compare.</param>
            <param name="a2">The second angle to compare.</param>
            <returns>true if the value of a1 is greater than or equal to the value of a2; otherwise, false.</returns>
        </member>
        <member name="M:NetFabric.AngleRadians.op_UnaryNegation(NetFabric.AngleRadians)">
            <summary>
            Negates an angle.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>Result of the negation.</returns>
        </member>
        <member name="M:NetFabric.AngleRadians.op_Addition(NetFabric.AngleRadians,NetFabric.AngleRadians)">
            <summary>
            Adds two vectors. 
            </summary>
            <param name="left">Source angle.</param>
            <param name="right">Source angle.</param>
            <returns>Result of the addition.</returns>
        </member>
        <member name="M:NetFabric.AngleRadians.op_Subtraction(NetFabric.AngleRadians,NetFabric.AngleRadians)">
            <summary>
            Subtracts a angle from a angle.  
            </summary>
            <param name="left">Source angle.</param>
            <param name="right">Source angle.</param>
            <returns>Result of the subtraction.</returns>
        </member>
        <member name="M:NetFabric.AngleRadians.op_Multiply(System.Double,NetFabric.AngleRadians)">
            <summary>
            Multiplies a scalar by an angle value. 
            </summary>
            <param name="left">Scalar value.</param>
            <param name="right">Source angle.</param>
            <returns>Result of the multiplication.</returns>
        </member>
        <member name="M:NetFabric.AngleRadians.op_Division(NetFabric.AngleRadians,System.Double)">
            <summary>
            Divides a angle by a scalar value. 
            </summary>
            <param name="left">Source angle.</param>
            <param name="right">Scalar value.</param>
            <returns>Result of the division.</returns>
        </member>
        <member name="M:NetFabric.AngleRadians.ToString(System.String)">
            <summary>
            Converts the value of the current AngleRadians object to its equivalent string representation, using a specified format.
            </summary>
            <param name="format">A string that specifies the format to be used for the returned string.</param>
            <returns>A string representation of the value of the current AngleRadians object, in the specified format.</returns>
        </member>
        <member name="M:NetFabric.AngleRadians.ToString(System.String,System.IFormatProvider)">
            <summary>
            Converts the value of the current AngleRadians object to its equivalent string representation using the specified format and culture-specific format information.
            </summary>
            <param name="format">A standard or custom date and time format string.</param>
            <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
            <returns>A string representation of value of the current AngleRadians object as specified by format and provider.</returns>
        </member>
        <member name="M:NetFabric.AngleRadians.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>true if value is a AngleRadians object that represents the same angle as the current AngleRadians structure; otherwise, false.</returns>
        </member>
        <member name="M:NetFabric.AngleRadians.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:NetFabric.AngleRadians.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="F:NetFabric.AngleRevolutions.NaN">
            <summary>
            Represents a AngleRevolutions value that is not a number (NaN). This field is read-only.
            </summary>
        </member>
        <member name="F:NetFabric.AngleRevolutions.Zero">
            <summary>
            Represents the zero AngleRevolutions value (zero revolutions). This field is read-only.
            </summary>
        </member>
        <member name="F:NetFabric.AngleRevolutions.Golden">
            <summary>
            Represents the golden AngleRevolutions value (~137.508 degrees). This field is read-only.
            </summary>
        </member>
        <member name="F:NetFabric.AngleRevolutions.MinValue">
            <summary>
            Represents the smallest possible value of a AngleRevolutions. This field is read-only.
            </summary>
        </member>
        <member name="F:NetFabric.AngleRevolutions.MaxValue">
            <summary>
            Represents the largest possible value of a AngleRevolutions. This field is read-only.
            </summary>
        </member>
        <member name="F:NetFabric.AngleRevolutions.Right">
            <summary>
            Represents the right AngleRevolutions value (quarter revolution). This field is read-only.
            </summary>
        </member>
        <member name="F:NetFabric.AngleRevolutions.Straight">
            <summary>
            Represents the straight AngleRevolutions value (half revolution). This field is read-only.
            </summary>
        </member>
        <member name="F:NetFabric.AngleRevolutions.Full">
            <summary>
            Represents the full AngleRevolutions value (one revolutions). This field is read-only.
            </summary>
        </member>
        <member name="F:NetFabric.AngleRevolutions.Revolutions">
            <summary>
            Gets the amplitude of the angle in revolutions. This field is read-only.
            </summary>
        </member>
        <member name="M:NetFabric.AngleRevolutions.op_Equality(NetFabric.AngleRevolutions,NetFabric.AngleRevolutions)">
            <summary>
            Indicates whether two AngleRevolutions instances are equal.
            </summary>
            <param name="a1">The first angle to compare.</param>
            <param name="a2">The second angle to compare.</param>
            <returns>true if the values of a1 and a2 are equal; otherwise, false.</returns>
        </member>
        <member name="M:NetFabric.AngleRevolutions.op_Inequality(NetFabric.AngleRevolutions,NetFabric.AngleRevolutions)">
            <summary>
            Indicates whether two AngleRevolutions instances are equal.
            </summary>
            <param name="a1">The first angle to compare.</param>
            <param name="a2">The second angle to compare.</param>
            <returns>true if the values of a1 and a2 are equal; otherwise, false.</returns>
        </member>
        <member name="M:NetFabric.AngleRevolutions.Equals(NetFabric.AngleRevolutions)">
            <summary>
            Indicates whether whether this instance is equal to a specified AngleRevolutions object.
            </summary>
            <param name="other">An AngleRevolutions to compare with this instance.</param>
            <returns>true if obj represents the same angle as this instance; otherwise, false.</returns>
            <remarks>This method implements the System.IEquatable&lt;T&gt; interface, and performs slightly better than <see cref="M:NetFabric.AngleRevolutions.Equals(System.Object)"/> because it does not have to convert the obj parameter to an object.</remarks>
        </member>
        <member name="M:NetFabric.AngleRevolutions.op_LessThan(NetFabric.AngleRevolutions,NetFabric.AngleRevolutions)">
            <summary>
            Indicates whether a specified AngleRevolutions is less than another specified AngleRevolutions.
            </summary>
            <param name="a1">The first angle to compare.</param>
            <param name="a2">The second angle to compare.</param>
            <returns>true if the value of a1 is less than the value of a2; otherwise, false.</returns>
        </member>
        <member name="M:NetFabric.AngleRevolutions.op_LessThanOrEqual(NetFabric.AngleRevolutions,NetFabric.AngleRevolutions)">
            <summary>
            Indicates whether a specified AngleRevolutions is less than or equal to another specified AngleRevolutions.
            </summary>
            <param name="a1">The first angle to compare.</param>
            <param name="a2">The second angle to compare.</param>
            <returns>true if the value of a1 is less than or equal to the value of a2; otherwise, false.</returns>
        </member>
        <member name="M:NetFabric.AngleRevolutions.op_GreaterThan(NetFabric.AngleRevolutions,NetFabric.AngleRevolutions)">
            <summary>
            Indicates whether a specified AngleRevolutions is greater than another specified AngleRevolutions.
            </summary>
            <param name="a1">The first angle to compare.</param>
            <param name="a2">The second angle to compare.</param>
            <returns>true if the value of a1 is greater than the value of a2; otherwise, false.</returns>
        </member>
        <member name="M:NetFabric.AngleRevolutions.op_GreaterThanOrEqual(NetFabric.AngleRevolutions,NetFabric.AngleRevolutions)">
            <summary>
            Indicates whether a specified AngleRevolutions is greater than or equal to another specified AngleRevolutions.
            </summary>
            <param name="a1">The first angle to compare.</param>
            <param name="a2">The second angle to compare.</param>
            <returns>true if the value of a1 is greater than or equal to the value of a2; otherwise, false.</returns>
        </member>
        <member name="M:NetFabric.AngleRevolutions.op_UnaryNegation(NetFabric.AngleRevolutions)">
            <summary>
            Negates an angle.
            </summary>
            <param name="angle">Source angle.</param>
            <returns>Result of the negation.</returns>
        </member>
        <member name="M:NetFabric.AngleRevolutions.op_Addition(NetFabric.AngleRevolutions,NetFabric.AngleRevolutions)">
            <summary>
            Adds two vectors. 
            </summary>
            <param name="left">Source angle.</param>
            <param name="right">Source angle.</param>
            <returns>Result of the addition.</returns>
        </member>
        <member name="M:NetFabric.AngleRevolutions.op_Subtraction(NetFabric.AngleRevolutions,NetFabric.AngleRevolutions)">
            <summary>
            Subtracts a angle from a angle.  
            </summary>
            <param name="left">Source angle.</param>
            <param name="right">Source angle.</param>
            <returns>Result of the subtraction.</returns>
        </member>
        <member name="M:NetFabric.AngleRevolutions.op_Multiply(System.Double,NetFabric.AngleRevolutions)">
            <summary>
            Multiplies a scalar by an angle value. 
            </summary>
            <param name="left">Scalar value.</param>
            <param name="right">Source angle.</param>
            <returns>Result of the multiplication.</returns>
        </member>
        <member name="M:NetFabric.AngleRevolutions.op_Division(NetFabric.AngleRevolutions,System.Double)">
            <summary>
            Divides a angle by a scalar value. 
            </summary>
            <param name="left">Source angle.</param>
            <param name="right">Scalar value.</param>
            <returns>Result of the division.</returns>
        </member>
        <member name="M:NetFabric.AngleRevolutions.ToString(System.String)">
            <summary>
            Converts the value of the current AngleRevolutions object to its equivalent string representation, using a specified format.
            </summary>
            <param name="format">A string that specifies the format to be used for the returned string.</param>
            <returns>A string representation of the value of the current AngleRevolutions object, in the specified format.</returns>
        </member>
        <member name="M:NetFabric.AngleRevolutions.ToString(System.String,System.IFormatProvider)">
            <summary>
            Converts the value of the current AngleRevolutions object to its equivalent string representation using the specified format and culture-specific format information.
            </summary>
            <param name="format">A standard or custom date and time format string.</param>
            <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
            <returns>A string representation of value of the current AngleRevolutions object as specified by format and provider.</returns>
        </member>
        <member name="M:NetFabric.AngleRevolutions.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>true if value is a AngleRevolutions object that represents the same angle as the current AngleRevolutions structure; otherwise, false.</returns>
        </member>
        <member name="M:NetFabric.AngleRevolutions.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:NetFabric.AngleRevolutions.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:NetFabric.Quadrant">
            <summary>
            The four regions divided by the x and y axis.
            </summary>
        </member>
        <member name="F:NetFabric.Quadrant.First">
            <summary>
            The region where x and y are positive.
            </summary>
        </member>
        <member name="F:NetFabric.Quadrant.Second">
            <summary>
            The region where x is negative and y is positive.
            </summary>
        </member>
        <member name="F:NetFabric.Quadrant.Third">
            <summary>
            The region where x and y are negative.
            </summary>
        </member>
        <member name="F:NetFabric.Quadrant.Fourth">
            <summary>
            The region where x is positive and y is negative.
            </summary>
        </member>
    </members>
</doc>
